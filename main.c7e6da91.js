(self.webpackChunkneishauben=self.webpackChunkneishauben||[]).push([[179],{424:(e,n,r)=>{"use strict";r.d(n,{Z:()=>s});var a=r(15),t=r.n(a),i=r(645),o=r.n(i)()(t());o.push([e.id,"body { margin: 0; }\ncanvas { display: block; outline: none; }","",{version:3,sources:["webpack://src/index.css"],names:[],mappings:"AAAA,OAAO,SAAS,EAAE;AAClB,SAAS,cAAc,EAAE,aAAa,EAAE",sourcesContent:["body { margin: 0; }\ncanvas { display: block; outline: none; }"],sourceRoot:""}]);const s=o},869:(e,n,r)=>{"use strict";var a=r(212),t=r(886),i=r(379),o=r.n(i),s=r(424);o()(s.Z,{insert:"head",singleton:!1}),s.Z.locals;var c=r(134),u=r.n(c);const l=r.p+"95d49065bd0c166c6c76b12275704bb6.wasm",d=[1644970,52480,16776960,16777215,16741632,14555674],p=[20,32,53,12,27,45,7,25,40,2,22,35,9,26,42,15,29,48,14,28,47,17,30,50,19,31,52,6,24,39,4,23,37,1,21,34,0,8,13,3,10,16,5,11,18,46,41,33,49,43,36,51,44,38],f=[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5],y=[{id:0,name:"F",center:[0,0,1]},{id:1,name:"B",center:[0,0,-1]},{id:2,name:"U",center:[0,1,0]},{id:3,name:"D",center:[0,-1,0]},{id:4,name:"L",center:[-1,0,0]},{id:5,name:"R",center:[1,0,0]}],m=[{code:0,displayName:"F",plane:0,direction:-1,layers:1,quarterTurns:1},{code:1,displayName:"F'",plane:0,direction:1,layers:1,quarterTurns:1},{code:2,displayName:"B",plane:1,direction:-1,layers:1,quarterTurns:1},{code:3,displayName:"B'",plane:1,direction:1,layers:1,quarterTurns:1},{code:4,displayName:"U",plane:2,direction:-1,layers:1,quarterTurns:1},{code:5,displayName:"U'",plane:2,direction:1,layers:1,quarterTurns:1},{code:6,displayName:"D",plane:3,direction:-1,layers:1,quarterTurns:1},{code:7,displayName:"D'",plane:3,direction:1,layers:1,quarterTurns:1},{code:8,displayName:"L",plane:4,direction:-1,layers:1,quarterTurns:1},{code:9,displayName:"L'",plane:4,direction:1,layers:1,quarterTurns:1},{code:10,displayName:"R",plane:5,direction:-1,layers:1,quarterTurns:1},{code:11,displayName:"R'",plane:5,direction:1,layers:1,quarterTurns:1},{code:12,displayName:"f",plane:0,direction:-1,layers:2,quarterTurns:1},{code:13,displayName:"f'",plane:0,direction:1,layers:2,quarterTurns:1},{code:14,displayName:"b",plane:1,direction:-1,layers:2,quarterTurns:1},{code:15,displayName:"b'",plane:1,direction:1,layers:2,quarterTurns:1},{code:16,displayName:"u",plane:2,direction:-1,layers:2,quarterTurns:1},{code:17,displayName:"u'",plane:2,direction:1,layers:2,quarterTurns:1},{code:18,displayName:"d",plane:3,direction:-1,layers:2,quarterTurns:1},{code:19,displayName:"d'",plane:3,direction:1,layers:2,quarterTurns:1},{code:20,displayName:"l",plane:4,direction:-1,layers:2,quarterTurns:1},{code:21,displayName:"l'",plane:4,direction:1,layers:2,quarterTurns:1},{code:22,displayName:"r",plane:5,direction:-1,layers:2,quarterTurns:1},{code:23,displayName:"r'",plane:5,direction:1,layers:2,quarterTurns:1},{code:24,displayName:"F2",plane:0,direction:1,layers:1,quarterTurns:2},{code:25,displayName:"B2",plane:1,direction:1,layers:1,quarterTurns:2},{code:26,displayName:"U2",plane:2,direction:1,layers:1,quarterTurns:2},{code:27,displayName:"D2",plane:3,direction:1,layers:1,quarterTurns:2},{code:28,displayName:"L2",plane:4,direction:1,layers:1,quarterTurns:2},{code:29,displayName:"R2",plane:5,direction:1,layers:1,quarterTurns:2},{code:30,displayName:"z",plane:0,direction:-1,layers:3,quarterTurns:1},{code:31,displayName:"z'",plane:0,direction:1,layers:3,quarterTurns:1},{code:32,displayName:"y",plane:2,direction:-1,layers:3,quarterTurns:1},{code:33,displayName:"y'",plane:2,direction:1,layers:3,quarterTurns:1},{code:34,displayName:"x'",plane:5,direction:1,layers:3,quarterTurns:1},{code:35,displayName:"x",plane:5,direction:-1,layers:3,quarterTurns:1},{code:36,displayName:"S",plane:0,direction:-1,layers:-1,quarterTurns:1},{code:37,displayName:"S'",plane:1,direction:-1,layers:-1,quarterTurns:1},{code:38,displayName:"E'",plane:2,direction:-1,layers:-1,quarterTurns:1},{code:39,displayName:"E",plane:3,direction:-1,layers:-1,quarterTurns:1},{code:40,displayName:"M",plane:4,direction:-1,layers:-1,quarterTurns:1},{code:41,displayName:"M'",plane:5,direction:-1,layers:-1,quarterTurns:1},{code:42,displayName:"S2",plane:0,direction:1,layers:-1,quarterTurns:2},{code:43,displayName:"E2",plane:2,direction:1,layers:-1,quarterTurns:2},{code:44,displayName:"M2",plane:4,direction:1,layers:-1,quarterTurns:2},{code:45,displayName:"z2",plane:0,direction:1,layers:3,quarterTurns:2},{code:46,displayName:"y2",plane:2,direction:1,layers:3,quarterTurns:2},{code:47,displayName:"x2",plane:5,direction:1,layers:3,quarterTurns:2}],h=(e,n,r)=>Math.abs(e)+Math.abs(n)+Math.abs(r),w=e=>{const[n,r,a]=e.userData;e.position.set(n,r,a),e.rotation.set(0,0,0)},v=(e,n)=>{const{plane:r,direction:t,layers:i,quarterTurns:o}=n,s=o*Math.PI/2;var c=s;const[u,l]=((e,n,r)=>{const a=[];let t=null;function i(e,n,r){switch(r){case-1:return 0===e||0==n;case 1:return 0===e||e===n;case 2:return 0===e||e===n||0==n;case 3:return!0}}const o=y[n].center;function s(e,n,r,a){return i(o[0],e,a)&&i(o[1],n,a)&&i(o[2],r,a)}return e.forEach((e=>{const[n,i,o]=e.userData;s(n,i,o,r)&&a.push(e),1===h(n,i,o)&&s(n,i,o,1)&&(t=e)})),[t,a]})(e,r,i);return{step(){if(c<=0)return;const e=.07*(1.1-Math.pow((2*c-s)/s,2))*o;c-=e,l.forEach((n=>{!function(e,n,r,a,t){(t=void 0!==t&&t)&&e.parent.localToWorld(e.position),e.position.sub(n),e.position.applyAxisAngle(r,a),e.position.add(n),t&&e.parent.worldToLocal(e.position),e.rotateOnAxis(r,a)}(n,new a.Pa4(0,0,0),u.position,e*t,!0)}))},reset(){l.forEach((e=>w(e)))},finished:()=>c<=0}},b=(e,n,r,t)=>{if(void 0!==t){var i=document.createElement("canvas");i.height=256,i.width=256;var o=i.getContext("2d");const e=48,n=""+t;o.font=e+"pt Arial",o.fillStyle="white",o.fillRect(0,0,i.width,i.height),o.textAlign="center",o.textBaseline="middle",o.fillStyle="black",o.fillText(n,i.width/2,i.height/2);var s=new a.xEZ(i);s.needsUpdate=!0}const c=new a.BKK(.9,.9,1,1);c.center();const u=new a.Wid({color:0,map:s||null,side:a.ehD});var l=new a.Kj0(c,u);return 0!==e?l.rotateY(e*(Math.PI/2)):0!==n?l.rotateX(-n*(Math.PI/2)):-1==r&&l.rotateY(Math.PI),l.position.set(e/2,n/2,r/2),l.position.multiplyScalar(1.001),l.userData=[e,n,r],l},A=(e,n)=>{for(var r=0;r<54;++r)e[p[r]].material.color.setHex(d[n[r]])};!async function(){var e=await(async()=>{const e=await u()({locateFile:e=>e.endsWith(".wasm")?l:e});return e._init(),{performOperation(n,r){for(var a=e.stackSave(),t=e.stackAlloc(54),i=0;i<54;++i)e.setValue(t+i,n[i]);e._perform(t,r);const o=[];for(i=0;i<54;++i)o[i]=e.getValue(t+i);return e.stackRestore(a),o}}})(),n=new a.xsS,r=new a.cPb(75,window.innerWidth/window.innerHeight,.1,1e3);r.position.z=6,n.add(r);var i=new a.CP7({antialias:!0});i.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(i.domElement);var o=new a.cek(16777215,1.2,100);o.position.set(0,0,5),r.add(o);const s=new t.z(r,i.domElement);s.enableDamping=!0,s.dampingFactor=.25,s.enableZoom=!1,window.addEventListener("resize",(()=>{r.aspect=window.innerWidth/window.innerHeight,r.updateProjectionMatrix(),i.setSize(window.innerWidth,window.innerHeight)}),!1);const[c,d,p]=(()=>{const e=[],n=[],r=new a.ZAu;for(var t=-1;t<2;++t)for(var i=-1;i<2;++i)for(var o=-1;o<2;++o){const l=[];switch(h(t,i,o)){case 0:break;case 1:{const e=y.find((({center:[e,n,r]})=>e==t&&n==i&&r==o)).name;l.push(b(t,i,o,e));break}case 2:0==t?(l.push(b(t,i,0)),l.push(b(t,0,o))):0==i?(l.push(b(t,i,0)),l.push(b(0,i,o))):0==o&&(l.push(b(t,0,o)),l.push(b(0,i,o)));break;case 3:l.push(b(t,0,0)),l.push(b(0,i,0)),l.push(b(0,0,o))}const d=(s=13421772,c=void 0,u=void 0,c=function(e,n,r,t,i){let o=new a.bnF,s=1e-5,c=.04999;o.absarc(s,s,s,-Math.PI/2,-Math.PI,!0),o.absarc(s,.90002,s,Math.PI,Math.PI/2,!0),o.absarc(.90002,.90002,s,Math.PI/2,0,!0),o.absarc(.90002,s,s,0,-Math.PI/2,!0);let u=new a.$Vf(o,{depth:.9,bevelEnabled:!0,bevelSegments:10,steps:1,bevelSize:c,bevelThickness:t,curveSegments:5});return u.center(),u}(0,0,0,.05),u=new a.Wid({color:s}),new a.Kj0(c,u));d.userData=[t,i,o],w(d),d.add(...l),e.push(...l),r.add(d),n.push(d)}var s,c,u;return[r,n,e]})();n.add(c);var g=[...f];A(p,g);var T=0,q=v(d,m[T]),N=function(){window.requestAnimationFrame(N);{const n=m[T];q.finished()&&(q.reset(),g=e.performOperation(g,n.code),A(p,g),q=v(d,m[T=(T+1)%m.length])),q.step()}i.render(n,r)};window.requestAnimationFrame(N)}()},134:e=>{var n,r=(n="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,function(e){var r,a,t=void 0!==(e=e||{})?e:{};t.ready=new Promise((function(e,n){r=e,a=n}));var i,o={};for(i in t)t.hasOwnProperty(i)&&(o[i]=t[i]);var s=[],c="./this.program",u=function(e,n){throw n},l="";document.currentScript&&(l=document.currentScript.src),n&&(l=n),l=0!==l.indexOf("blob:")?l.substr(0,l.lastIndexOf("/")+1):"",t.print||console.log.bind(console);var d,p,f,y,m=t.printErr||console.warn.bind(console);for(i in o)o.hasOwnProperty(i)&&(t[i]=o[i]);o=null,t.arguments&&(s=t.arguments),t.thisProgram&&(c=t.thisProgram),t.quit&&(u=t.quit),t.wasmBinary&&(d=t.wasmBinary),t.noExitRuntime&&(p=t.noExitRuntime),"object"!=typeof WebAssembly&&B("no native wasm support detected");var h=!1;function w(e){var n=t["_"+e];return n||B("Assertion failed: "+("Cannot call unknown function "+e+", make sure it is exported")),n}function v(e,n,r,a,t){var i={string:function(e){var n=0;if(null!=e&&0!==e){var r=1+(e.length<<2);!function(e,n,r){E(e,g,n,r)}(e,n=G(r),r)}return n},array:function(e){var n=G(e.length);return function(e,n){A.set(e,n)}(e,n),n}},o=w(e),s=[],c=0;if(a)for(var u=0;u<a.length;u++){var l=i[r[u]];l?(0===c&&(c=X()),s[u]=l(a[u])):s[u]=a[u]}var d=o.apply(null,s);return d=function(e){return"string"===n?(r=e)?function(e,n,r){for(var a=n+undefined,t=n;e[t]&&!(t>=a);)++t;if(t-n>16&&e.subarray&&S)return S.decode(e.subarray(n,t));for(var i="";n<t;){var o=e[n++];if(128&o){var s=63&e[n++];if(192!=(224&o)){var c=63&e[n++];if((o=224==(240&o)?(15&o)<<12|s<<6|c:(7&o)<<18|s<<12|c<<6|63&e[n++])<65536)i+=String.fromCharCode(o);else{var u=o-65536;i+=String.fromCharCode(55296|u>>10,56320|1023&u)}}else i+=String.fromCharCode((31&o)<<6|s)}else i+=String.fromCharCode(o)}return i}(g,r):"":"boolean"===n?Boolean(e):e;var r}(d),0!==c&&$(c),d}var b,A,g,T,q,N,k,S="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function E(e,n,r,a){if(!(a>0))return 0;for(var t=r,i=r+a-1,o=0;o<e.length;++o){var s=e.charCodeAt(o);if(s>=55296&&s<=57343&&(s=65536+((1023&s)<<10)|1023&e.charCodeAt(++o)),s<=127){if(r>=i)break;n[r++]=s}else if(s<=2047){if(r+1>=i)break;n[r++]=192|s>>6,n[r++]=128|63&s}else if(s<=65535){if(r+2>=i)break;n[r++]=224|s>>12,n[r++]=128|s>>6&63,n[r++]=128|63&s}else{if(r+3>=i)break;n[r++]=240|s>>18,n[r++]=128|s>>12&63,n[r++]=128|s>>6&63,n[r++]=128|63&s}}return n[r]=0,r-t}function R(e){var n=function(e){for(var n=0,r=0;r<e.length;++r){var a=e.charCodeAt(r);a>=55296&&a<=57343&&(a=65536+((1023&a)<<10)|1023&e.charCodeAt(++r)),a<=127?++n:n+=a<=2047?2:a<=65535?3:4}return n}(e)+1,r=G(n);return E(e,A,r,n),r}var x,I=t.INITIAL_MEMORY||16777216;(f=t.wasmMemory?t.wasmMemory:new WebAssembly.Memory({initial:I/65536,maximum:32768}))&&(b=f.buffer),I=b.byteLength,b=x=b,t.HEAP8=A=new Int8Array(x),t.HEAP16=T=new Int16Array(x),t.HEAP32=q=new Int32Array(x),t.HEAPU8=g=new Uint8Array(x),t.HEAPU16=new Uint16Array(x),t.HEAPU32=new Uint32Array(x),t.HEAPF32=N=new Float32Array(x),t.HEAPF64=k=new Float64Array(x);var P=[],M=[],_=[],C=[],W=0,D=null,F=null;function B(e){t.onAbort&&t.onAbort(e),m(e+=""),h=!0,e="abort("+e+"). Build with -s ASSERTIONS=1 for more info.";var n=new WebAssembly.RuntimeError(e);throw a(n),n}function H(e){return n=e,r="data:application/octet-stream;base64,",String.prototype.startsWith?n.startsWith(r):0===n.indexOf(r);var n,r}t.preloadedImages={},t.preloadedAudios={};var O,U,z,L="rubiks.wasm";function V(){try{if(d)return new Uint8Array(d);throw"both async and sync fetching of the wasm failed"}catch(e){B(e)}}function j(e){for(;e.length>0;){var n=e.shift();if("function"!=typeof n){var r=n.func;"number"==typeof r?void 0===n.arg?y.get(r)():y.get(r)(n.arg):r(void 0===n.arg?null:n.arg)}else n(t)}}H(L)||(O=L,L=t.locateFile?t.locateFile(O,l):l+O),M.push({func:function(){Y()}});var Z,K={a:f,b:function(e){var n=Date.now()/1e3|0;return e&&(q[e>>2]=n),n}},Y=(function(){var e={a:K};function n(e,n){var r=e.exports;t.asm=r,y=t.asm.c,function(e){if(W--,t.monitorRunDependencies&&t.monitorRunDependencies(W),0==W&&(null!==D&&(clearInterval(D),D=null),F)){var n=F;F=null,n()}}()}function r(e){n(e.instance)}function a(n){return(d||"function"!=typeof fetch?Promise.resolve().then(V):fetch(L,{credentials:"same-origin"}).then((function(e){if(!e.ok)throw"failed to load wasm binary file at '"+L+"'";return e.arrayBuffer()})).catch((function(){return V()}))).then((function(n){return WebAssembly.instantiate(n,e)})).then(n,(function(e){m("failed to asynchronously prepare wasm: "+e),B(e)}))}if(W++,t.monitorRunDependencies&&t.monitorRunDependencies(W),t.instantiateWasm)try{return t.instantiateWasm(e,n)}catch(e){return m("Module.instantiateWasm callback failed with error: "+e),!1}!function(){if(d||"function"!=typeof WebAssembly.instantiateStreaming||H(L)||"function"!=typeof fetch)return a(r);fetch(L,{credentials:"same-origin"}).then((function(n){return WebAssembly.instantiateStreaming(n,e).then(r,(function(e){return m("wasm streaming compile failed: "+e),m("falling back to ArrayBuffer instantiation"),a(r)}))}))}()}(),t.___wasm_call_ctors=function(){return(Y=t.___wasm_call_ctors=t.asm.d).apply(null,arguments)}),X=(t._init=function(){return(t._init=t.asm.e).apply(null,arguments)},t._perform=function(){return(t._perform=t.asm.f).apply(null,arguments)},t._main=function(){return(t._main=t.asm.g).apply(null,arguments)},t.stackSave=function(){return(X=t.stackSave=t.asm.h).apply(null,arguments)}),$=t.stackRestore=function(){return($=t.stackRestore=t.asm.i).apply(null,arguments)},G=t.stackAlloc=function(){return(G=t.stackAlloc=t.asm.j).apply(null,arguments)};function J(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}function Q(e){function n(){Z||(Z=!0,t.calledRun=!0,h||(j(M),j(_),r(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),ee&&function(e){var n,r=t._main,a=(e=e||[]).length+1,i=G(4*(a+1));q[i>>2]=R(c);for(var o=1;o<a;o++)q[(i>>2)+o]=R(e[o-1]);q[(i>>2)+a]=0;try{n=r(a,i),p&&0===n||(p||(t.onExit&&t.onExit(n),h=!0),u(n,new J(n)))}catch(e){if(e instanceof J)return;if("unwind"==e)return void(p=!0);var s=e;e&&"object"==typeof e&&e.stack&&(s=[e,e.stack]),m("exception thrown: "+s),u(1,e)}}(e),function(){if(t.postRun)for("function"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;)e=t.postRun.shift(),C.unshift(e);var e;j(C)}()))}e=e||s,W>0||(function(){if(t.preRun)for("function"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)e=t.preRun.shift(),P.unshift(e);var e;j(P)}(),W>0||(t.setStatus?(t.setStatus("Running..."),setTimeout((function(){setTimeout((function(){t.setStatus("")}),1),n()}),1)):n()))}if(t.cwrap=function(e,n,r,a){var t=(r=r||[]).every((function(e){return"number"===e}));return"string"!==n&&t&&!a?w(e):function(){return v(e,n,r,arguments)}},t.setValue=function(e,n,r,a){switch("*"===(r=r||"i8").charAt(r.length-1)&&(r="i32"),r){case"i1":case"i8":A[e>>0]=n;break;case"i16":T[e>>1]=n;break;case"i32":q[e>>2]=n;break;case"i64":z=[n>>>0,(U=n,+Math.abs(U)>=1?U>0?(0|Math.min(+Math.floor(U/4294967296),4294967295))>>>0:~~+Math.ceil((U-+(~~U>>>0))/4294967296)>>>0:0)],q[e>>2]=z[0],q[e+4>>2]=z[1];break;case"float":N[e>>2]=n;break;case"double":k[e>>3]=n;break;default:B("invalid type for setValue: "+r)}},t.getValue=function(e,n,r){switch("*"===(n=n||"i8").charAt(n.length-1)&&(n="i32"),n){case"i1":case"i8":return A[e>>0];case"i16":return T[e>>1];case"i32":case"i64":return q[e>>2];case"float":return N[e>>2];case"double":return k[e>>3];default:B("invalid type for getValue: "+n)}return null},F=function e(){Z||Q(),Z||(F=e)},t.run=Q,t.preInit)for("function"==typeof t.preInit&&(t.preInit=[t.preInit]);t.preInit.length>0;)t.preInit.pop()();var ee=!0;return t.noInitialRun&&(ee=!1),p=!0,Q(),e.ready});e.exports=r}},0,[[869,666,216]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,