(self.webpackChunkrubiks=self.webpackChunkrubiks||[]).push([[179],{424:(e,r,t)=>{"use strict";t.d(r,{Z:()=>s});var n=t(15),o=t.n(n),i=t(645),a=t.n(i)()(o());a.push([e.id,"body { margin: 0; }\ncanvas { display: block; }","",{version:3,sources:["webpack://src/index.css"],names:[],mappings:"AAAA,OAAO,SAAS,EAAE;AAClB,SAAS,cAAc,EAAE",sourcesContent:["body { margin: 0; }\ncanvas { display: block; }"],sourceRoot:""}]);const s=a},204:(e,r,t)=>{"use strict";var n=t(134),o=t.n(n);const i=t.p+"4bdc004e6a421ed9c5bcf3dddb42ed85.wasm";var a=t(212),s=t(886),u=t(379),c=t.n(u),l=t(424);c()(l.Z,{insert:"head",singleton:!1}),l.Z.locals;const f=[1644970,52480,16776960,16777215,16741632,14555674],d=[20,32,53,12,27,45,7,25,40,2,22,35,9,26,42,15,29,48,14,28,47,17,30,50,19,31,52,6,24,39,4,23,37,1,21,34,0,8,13,3,10,16,5,11,18,46,41,33,49,43,36,51,44,38];o()({locateFile:e=>e.endsWith(".wasm")?i:e}).then((e=>{console.log(e),console.log(JSON.stringify(e._fib(12)))})),function(){var e=new a.xsS,r=new a.cPb(75,window.innerWidth/window.innerHeight,.1,1e3),t=new a.CP7({antialias:!0});t.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(t.domElement);var n=new a.cek(16777215,1.2,100);n.position.set(0,0,5),r.add(n);const o=new a.ZAu,i=[],u=(e,r,t,n)=>{if(void 0!==n){var o=document.createElement("canvas");o.height=100,o.width=100;var i=o.getContext("2d");const e=18,r=""+n;i.font=e+"pt Arial",i.textAlign="center",i.textBaseline="middle",i.fillStyle="white",i.fillText(r,o.width/2,o.height/2),console.log(o.width,o.height);var s=new a.xEZ(o);s.needsUpdate=!0}var u=new a.BKK(.9,.9,1,1);u.center();var c=new a.Wid({color:0,map:s,side:a.ehD}),l=new a.Kj0(u,c);return 0!==e?l.rotateY(e*(Math.PI/2)):0!==r?l.rotateX(-r*(Math.PI/2)):-1==t&&l.rotateY(Math.PI),l.position.set(e/2,r/2,t/2),l.position.multiplyScalar(1.01),l},c=(e,r,t)=>Math.abs(e)+Math.abs(r)+Math.abs(t),l=e=>{const[r,t,n]=e.userData;e.position.set(r,t,n),e.rotation.set(0,0,0)},h=[];for(var p=-1;p<2;++p){const e=[];for(var m=-1;m<2;++m){const r=[];for(var w=-1;w<2;++w){const e=(v=1052688,g=void 0,E=void 0,g=function(e,r,t,n,o){let i=new a.bnF,s=1e-5,u=.04999;i.absarc(s,s,s,-Math.PI/2,-Math.PI,!0),i.absarc(s,.90002,s,Math.PI,Math.PI/2,!0),i.absarc(.90002,.90002,s,Math.PI/2,0,!0),i.absarc(.90002,s,s,0,-Math.PI/2,!0);let c=new a.$Vf(i,{amount:.9,bevelEnabled:!0,bevelSegments:4,steps:1,bevelSize:u,bevelThickness:n,curveSegments:2});return c.center(),c}(0,0,0,.05),E=new a.Wid({color:v}),new a.Kj0(g,E));e.userData=[p,m,w],l(e);const t=[];switch(c(p,m,w)){case 0:break;case 1:t.push(u(p,m,w));break;case 2:0==p?(t.push(u(p,m,0)),t.push(u(p,0,w))):0==m?(t.push(u(p,m,0)),t.push(u(0,m,w))):0==w&&(t.push(u(p,0,w)),t.push(u(0,m,w)));break;case 3:t.push(u(p,0,0)),t.push(u(0,m,0)),t.push(u(0,0,w))}e.add(...t),h.push(...t),o.add(e),r.push(e)}e.push(r)}i.push(e)}var v,g,E;console.log(h);const y=e=>{for(var r=0;r<54;++r)h[d[r]].material.color.setHex(f[e[r]])};y([0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5]),y("000000000111111111222222444555333333444444333555555222".split("").map((e=>parseInt(e)))),e.add(o);const k=new s.z(r,t.domElement);function b(e){const r=[[0,0,1],[0,0,-1],[0,1,0],[0,-1,0],[-1,0,0],[1,0,0]],t=[];let n=null;for(var o=-1;o<2;++o)for(var a=-1;a<2;++a)for(var s=-1;s<2;++s)if(!(r[e][0]&&r[e][0]!==o||r[e][1]&&r[e][1]!==a||r[e][2]&&r[e][2]!==s)){const e=i[o+1][a+1][s+1];1==c(o,a,s)&&(n=e),t.push(e)}return[n,t]}k.enableDamping=!0,k.dampingFactor=.25,k.enableZoom=!1,r.position.z=6,e.add(r),window.addEventListener("resize",(()=>{r.aspect=window.innerWidth/window.innerHeight,r.updateProjectionMatrix(),t.setSize(window.innerWidth,window.innerHeight)}),!1);var _=Math.PI/2,D=_,S=0,[A,P]=b(S),F=function(){requestAnimationFrame(F);{D<1e-4&&(D=_,S=(S+1)%6,P.forEach((e=>l(e))),[A,P]=b(S),console.log(A.position.clone()));const e=.07*(1.1-Math.pow((2*D-_)/_,2));D-=e,P.forEach((r=>{!function(e,r,t,n,o){(o=void 0!==o&&o)&&e.parent.localToWorld(e.position),e.position.sub(r),e.position.applyAxisAngle(t,n),e.position.add(r),o&&e.parent.worldToLocal(e.position),e.rotateOnAxis(t,n)}(r,new a.Pa4(0,0,0),A.position,e,!0)}))}t.render(e,r)};F()}()},134:e=>{var r,t=(r="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,function(e){var t,n,o=void 0!==(e=e||{})?e:{};o.ready=new Promise((function(e,r){t=e,n=r}));var i,a={};for(i in o)o.hasOwnProperty(i)&&(a[i]=o[i]);var s,u=[],c="./this.program",l=function(e,r){throw r},f="";document.currentScript&&(f=document.currentScript.src),r&&(f=r),f=0!==f.indexOf("blob:")?f.substr(0,f.lastIndexOf("/")+1):"",s=function(e){var r=new XMLHttpRequest;return r.open("GET",e,!1),r.send(null),r.responseText};var d,h,p,m,w=o.print||console.log.bind(console),v=o.printErr||console.warn.bind(console);for(i in a)a.hasOwnProperty(i)&&(o[i]=a[i]);a=null,o.arguments&&(u=o.arguments),o.thisProgram&&(c=o.thisProgram),o.quit&&(l=o.quit),o.wasmBinary&&(d=o.wasmBinary),o.noExitRuntime&&(h=o.noExitRuntime),"object"!=typeof WebAssembly&&q("no native wasm support detected");var g=!1;function E(e,r){e||q("Assertion failed: "+r)}function y(e){var r=o["_"+e];return E(r,"Cannot call unknown function "+e+", make sure it is exported"),r}function k(e,r,t,n,o){var i={string:function(e){var r=0;if(null!=e&&0!==e){var t=1+(e.length<<2);M(e,r=me(t),t)}return r},array:function(e){var r=me(e.length);return function(e,r){_.set(e,r)}(e,r),r}},a=y(e),s=[],u=0;if(n)for(var c=0;c<n.length;c++){var l=i[t[c]];l?(0===u&&(u=he()),s[c]=l(n[c])):s[c]=n[c]}var f=a.apply(null,s);return f=function(e){return"string"===r?F(e):"boolean"===r?Boolean(e):e}(f),0!==u&&pe(u),f}var b,_,D,S,A="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function P(e,r,t){for(var n=r+t,o=r;e[o]&&!(o>=n);)++o;if(o-r>16&&e.subarray&&A)return A.decode(e.subarray(r,o));for(var i="";r<o;){var a=e[r++];if(128&a){var s=63&e[r++];if(192!=(224&a)){var u=63&e[r++];if((a=224==(240&a)?(15&a)<<12|s<<6|u:(7&a)<<18|s<<12|u<<6|63&e[r++])<65536)i+=String.fromCharCode(a);else{var c=a-65536;i+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else i+=String.fromCharCode((31&a)<<6|s)}else i+=String.fromCharCode(a)}return i}function F(e,r){return e?P(D,e,r):""}function x(e,r,t,n){if(!(n>0))return 0;for(var o=t,i=t+n-1,a=0;a<e.length;++a){var s=e.charCodeAt(a);if(s>=55296&&s<=57343&&(s=65536+((1023&s)<<10)|1023&e.charCodeAt(++a)),s<=127){if(t>=i)break;r[t++]=s}else if(s<=2047){if(t+1>=i)break;r[t++]=192|s>>6,r[t++]=128|63&s}else if(s<=65535){if(t+2>=i)break;r[t++]=224|s>>12,r[t++]=128|s>>6&63,r[t++]=128|63&s}else{if(t+3>=i)break;r[t++]=240|s>>18,r[t++]=128|s>>12&63,r[t++]=128|s>>6&63,r[t++]=128|63&s}}return r[t]=0,t-o}function M(e,r,t){return x(e,D,r,t)}function R(e){for(var r=0,t=0;t<e.length;++t){var n=e.charCodeAt(t);n>=55296&&n<=57343&&(n=65536+((1023&n)<<10)|1023&e.charCodeAt(++t)),n<=127?++r:r+=n<=2047?2:n<=65535?3:4}return r}function B(e){var r=R(e)+1,t=me(r);return x(e,_,t,r),t}function T(e){b=e,o.HEAP8=_=new Int8Array(e),o.HEAP16=new Int16Array(e),o.HEAP32=S=new Int32Array(e),o.HEAPU8=D=new Uint8Array(e),o.HEAPU16=new Uint16Array(e),o.HEAPU32=new Uint32Array(e),o.HEAPF32=new Float32Array(e),o.HEAPF64=new Float64Array(e)}var z=o.INITIAL_MEMORY||16777216;(p=o.wasmMemory?o.wasmMemory:new WebAssembly.Memory({initial:z/65536,maximum:32768}))&&(b=p.buffer),z=b.byteLength,T(b);var N=[],I=[],O=[],C=[],j=0,L=null,W=null;function H(e){j++,o.monitorRunDependencies&&o.monitorRunDependencies(j)}function U(e){if(j--,o.monitorRunDependencies&&o.monitorRunDependencies(j),0==j&&(null!==L&&(clearInterval(L),L=null),W)){var r=W;W=null,r()}}function q(e){o.onAbort&&o.onAbort(e),v(e+=""),g=!0,e="abort("+e+"). Build with -s ASSERTIONS=1 for more info.";var r=new WebAssembly.RuntimeError(e);throw n(r),r}function X(e){return r=e,t="data:application/octet-stream;base64,",String.prototype.startsWith?r.startsWith(t):0===r.indexOf(t);var r,t}o.preloadedImages={},o.preloadedAudios={};var K,V,Z,G="rubiks.wasm";function Y(){try{if(d)return new Uint8Array(d);throw"both async and sync fetching of the wasm failed"}catch(e){q(e)}}function $(e){for(;e.length>0;){var r=e.shift();if("function"!=typeof r){var t=r.func;"number"==typeof t?void 0===r.arg?m.get(t)():m.get(t)(r.arg):t(void 0===r.arg?null:r.arg)}else r(o)}}function J(e){try{return p.grow(e-b.byteLength+65535>>>16),T(p.buffer),1}catch(e){}}X(G)||(K=G,G=o.locateFile?o.locateFile(K,f):f+K);var Q={splitPath:function(e){return/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(e).slice(1)},normalizeArray:function(e,r){for(var t=0,n=e.length-1;n>=0;n--){var o=e[n];"."===o?e.splice(n,1):".."===o?(e.splice(n,1),t++):t&&(e.splice(n,1),t--)}if(r)for(;t;t--)e.unshift("..");return e},normalize:function(e){var r="/"===e.charAt(0),t="/"===e.substr(-1);return(e=Q.normalizeArray(e.split("/").filter((function(e){return!!e})),!r).join("/"))||r||(e="."),e&&t&&(e+="/"),(r?"/":"")+e},dirname:function(e){var r=Q.splitPath(e),t=r[0],n=r[1];return t||n?(n&&(n=n.substr(0,n.length-1)),t+n):"."},basename:function(e){if("/"===e)return"/";var r=(e=(e=Q.normalize(e)).replace(/\/$/,"")).lastIndexOf("/");return-1===r?e:e.substr(r+1)},extname:function(e){return Q.splitPath(e)[3]},join:function(){var e=Array.prototype.slice.call(arguments,0);return Q.normalize(e.join("/"))},join2:function(e,r){return Q.normalize(e+"/"+r)}};function ee(e){return S[de()>>2]=e,e}var re={resolve:function(){for(var e="",r=!1,t=arguments.length-1;t>=-1&&!r;t--){var n=t>=0?arguments[t]:oe.cwd();if("string"!=typeof n)throw new TypeError("Arguments to path.resolve must be strings");if(!n)return"";e=n+"/"+e,r="/"===n.charAt(0)}return(r?"/":"")+(e=Q.normalizeArray(e.split("/").filter((function(e){return!!e})),!r).join("/"))||"."},relative:function(e,r){function t(e){for(var r=0;r<e.length&&""===e[r];r++);for(var t=e.length-1;t>=0&&""===e[t];t--);return r>t?[]:e.slice(r,t-r+1)}e=re.resolve(e).substr(1),r=re.resolve(r).substr(1);for(var n=t(e.split("/")),o=t(r.split("/")),i=Math.min(n.length,o.length),a=i,s=0;s<i;s++)if(n[s]!==o[s]){a=s;break}var u=[];for(s=a;s<n.length;s++)u.push("..");return(u=u.concat(o.slice(a))).join("/")}},te={ttys:[],init:function(){},shutdown:function(){},register:function(e,r){te.ttys[e]={input:[],output:[],ops:r},oe.registerDevice(e,te.stream_ops)},stream_ops:{open:function(e){var r=te.ttys[e.node.rdev];if(!r)throw new oe.ErrnoError(43);e.tty=r,e.seekable=!1},close:function(e){e.tty.ops.flush(e.tty)},flush:function(e){e.tty.ops.flush(e.tty)},read:function(e,r,t,n,o){if(!e.tty||!e.tty.ops.get_char)throw new oe.ErrnoError(60);for(var i=0,a=0;a<n;a++){var s;try{s=e.tty.ops.get_char(e.tty)}catch(e){throw new oe.ErrnoError(29)}if(void 0===s&&0===i)throw new oe.ErrnoError(6);if(null==s)break;i++,r[t+a]=s}return i&&(e.node.timestamp=Date.now()),i},write:function(e,r,t,n,o){if(!e.tty||!e.tty.ops.put_char)throw new oe.ErrnoError(60);try{for(var i=0;i<n;i++)e.tty.ops.put_char(e.tty,r[t+i])}catch(e){throw new oe.ErrnoError(29)}return n&&(e.node.timestamp=Date.now()),i}},default_tty_ops:{get_char:function(e){if(!e.input.length){var r=null;if("undefined"!=typeof window&&"function"==typeof window.prompt?null!==(r=window.prompt("Input: "))&&(r+="\n"):"function"==typeof readline&&null!==(r=readline())&&(r+="\n"),!r)return null;e.input=se(r,!0)}return e.input.shift()},put_char:function(e,r){null===r||10===r?(w(P(e.output,0)),e.output=[]):0!=r&&e.output.push(r)},flush:function(e){e.output&&e.output.length>0&&(w(P(e.output,0)),e.output=[])}},default_tty1_ops:{put_char:function(e,r){null===r||10===r?(v(P(e.output,0)),e.output=[]):0!=r&&e.output.push(r)},flush:function(e){e.output&&e.output.length>0&&(v(P(e.output,0)),e.output=[])}}};var ne={ops_table:null,mount:function(e){return ne.createNode(null,"/",16895,0)},createNode:function(e,r,t,n){if(oe.isBlkdev(t)||oe.isFIFO(t))throw new oe.ErrnoError(63);ne.ops_table||(ne.ops_table={dir:{node:{getattr:ne.node_ops.getattr,setattr:ne.node_ops.setattr,lookup:ne.node_ops.lookup,mknod:ne.node_ops.mknod,rename:ne.node_ops.rename,unlink:ne.node_ops.unlink,rmdir:ne.node_ops.rmdir,readdir:ne.node_ops.readdir,symlink:ne.node_ops.symlink},stream:{llseek:ne.stream_ops.llseek}},file:{node:{getattr:ne.node_ops.getattr,setattr:ne.node_ops.setattr},stream:{llseek:ne.stream_ops.llseek,read:ne.stream_ops.read,write:ne.stream_ops.write,allocate:ne.stream_ops.allocate,mmap:ne.stream_ops.mmap,msync:ne.stream_ops.msync}},link:{node:{getattr:ne.node_ops.getattr,setattr:ne.node_ops.setattr,readlink:ne.node_ops.readlink},stream:{}},chrdev:{node:{getattr:ne.node_ops.getattr,setattr:ne.node_ops.setattr},stream:oe.chrdev_stream_ops}});var o=oe.createNode(e,r,t,n);return oe.isDir(o.mode)?(o.node_ops=ne.ops_table.dir.node,o.stream_ops=ne.ops_table.dir.stream,o.contents={}):oe.isFile(o.mode)?(o.node_ops=ne.ops_table.file.node,o.stream_ops=ne.ops_table.file.stream,o.usedBytes=0,o.contents=null):oe.isLink(o.mode)?(o.node_ops=ne.ops_table.link.node,o.stream_ops=ne.ops_table.link.stream):oe.isChrdev(o.mode)&&(o.node_ops=ne.ops_table.chrdev.node,o.stream_ops=ne.ops_table.chrdev.stream),o.timestamp=Date.now(),e&&(e.contents[r]=o),o},getFileDataAsRegularArray:function(e){if(e.contents&&e.contents.subarray){for(var r=[],t=0;t<e.usedBytes;++t)r.push(e.contents[t]);return r}return e.contents},getFileDataAsTypedArray:function(e){return e.contents?e.contents.subarray?e.contents.subarray(0,e.usedBytes):new Uint8Array(e.contents):new Uint8Array(0)},expandFileStorage:function(e,r){var t=e.contents?e.contents.length:0;if(!(t>=r)){r=Math.max(r,t*(t<1048576?2:1.125)>>>0),0!=t&&(r=Math.max(r,256));var n=e.contents;e.contents=new Uint8Array(r),e.usedBytes>0&&e.contents.set(n.subarray(0,e.usedBytes),0)}},resizeFileStorage:function(e,r){if(e.usedBytes!=r){if(0==r)return e.contents=null,void(e.usedBytes=0);if(!e.contents||e.contents.subarray){var t=e.contents;return e.contents=new Uint8Array(r),t&&e.contents.set(t.subarray(0,Math.min(r,e.usedBytes))),void(e.usedBytes=r)}if(e.contents||(e.contents=[]),e.contents.length>r)e.contents.length=r;else for(;e.contents.length<r;)e.contents.push(0);e.usedBytes=r}},node_ops:{getattr:function(e){var r={};return r.dev=oe.isChrdev(e.mode)?e.id:1,r.ino=e.id,r.mode=e.mode,r.nlink=1,r.uid=0,r.gid=0,r.rdev=e.rdev,oe.isDir(e.mode)?r.size=4096:oe.isFile(e.mode)?r.size=e.usedBytes:oe.isLink(e.mode)?r.size=e.link.length:r.size=0,r.atime=new Date(e.timestamp),r.mtime=new Date(e.timestamp),r.ctime=new Date(e.timestamp),r.blksize=4096,r.blocks=Math.ceil(r.size/r.blksize),r},setattr:function(e,r){void 0!==r.mode&&(e.mode=r.mode),void 0!==r.timestamp&&(e.timestamp=r.timestamp),void 0!==r.size&&ne.resizeFileStorage(e,r.size)},lookup:function(e,r){throw oe.genericErrors[44]},mknod:function(e,r,t,n){return ne.createNode(e,r,t,n)},rename:function(e,r,t){if(oe.isDir(e.mode)){var n;try{n=oe.lookupNode(r,t)}catch(e){}if(n)for(var o in n.contents)throw new oe.ErrnoError(55)}delete e.parent.contents[e.name],e.name=t,r.contents[t]=e,e.parent=r},unlink:function(e,r){delete e.contents[r]},rmdir:function(e,r){var t=oe.lookupNode(e,r);for(var n in t.contents)throw new oe.ErrnoError(55);delete e.contents[r]},readdir:function(e){var r=[".",".."];for(var t in e.contents)e.contents.hasOwnProperty(t)&&r.push(t);return r},symlink:function(e,r,t){var n=ne.createNode(e,r,41471,0);return n.link=t,n},readlink:function(e){if(!oe.isLink(e.mode))throw new oe.ErrnoError(28);return e.link}},stream_ops:{read:function(e,r,t,n,o){var i=e.node.contents;if(o>=e.node.usedBytes)return 0;var a=Math.min(e.node.usedBytes-o,n);if(a>8&&i.subarray)r.set(i.subarray(o,o+a),t);else for(var s=0;s<a;s++)r[t+s]=i[o+s];return a},write:function(e,r,t,n,o,i){if(r.buffer===_.buffer&&(i=!1),!n)return 0;var a=e.node;if(a.timestamp=Date.now(),r.subarray&&(!a.contents||a.contents.subarray)){if(i)return a.contents=r.subarray(t,t+n),a.usedBytes=n,n;if(0===a.usedBytes&&0===o)return a.contents=r.slice(t,t+n),a.usedBytes=n,n;if(o+n<=a.usedBytes)return a.contents.set(r.subarray(t,t+n),o),n}if(ne.expandFileStorage(a,o+n),a.contents.subarray&&r.subarray)a.contents.set(r.subarray(t,t+n),o);else for(var s=0;s<n;s++)a.contents[o+s]=r[t+s];return a.usedBytes=Math.max(a.usedBytes,o+n),n},llseek:function(e,r,t){var n=r;if(1===t?n+=e.position:2===t&&oe.isFile(e.node.mode)&&(n+=e.node.usedBytes),n<0)throw new oe.ErrnoError(28);return n},allocate:function(e,r,t){ne.expandFileStorage(e.node,r+t),e.node.usedBytes=Math.max(e.node.usedBytes,r+t)},mmap:function(e,r,t,n,o,i){if(E(0===r),!oe.isFile(e.node.mode))throw new oe.ErrnoError(43);var a,s,u=e.node.contents;if(2&i||u.buffer!==b){if((n>0||n+t<u.length)&&(u=u.subarray?u.subarray(n,n+t):Array.prototype.slice.call(u,n,n+t)),s=!0,!(a=function(e){for(var r=function(e,r){return r||(r=16),Math.ceil(e/r)*r}(e,16384),t=fe(r);e<r;)_[t+e++]=0;return t}(t)))throw new oe.ErrnoError(48);_.set(u,a)}else s=!1,a=u.byteOffset;return{ptr:a,allocated:s}},msync:function(e,r,t,n,o){if(!oe.isFile(e.node.mode))throw new oe.ErrnoError(43);return 2&o||ne.stream_ops.write(e,r,0,n,t,!1),0}}},oe={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e){if(!(e instanceof oe.ErrnoError))throw e+" : "+(r=function(){var e=new Error;if(!e.stack){try{throw new Error}catch(r){e=r}if(!e.stack)return"(no stack trace available)"}return e.stack.toString()}(),o.extraStackTrace&&(r+="\n"+o.extraStackTrace()),r.replace(/\b_Z[\w\d_]+/g,(function(e){return e==e?e:e+" ["+e+"]"})));var r;return ee(e.errno)},lookupPath:function(e,r){if(r=r||{},!(e=re.resolve(oe.cwd(),e)))return{path:"",node:null};var t={follow_mount:!0,recurse_count:0};for(var n in t)void 0===r[n]&&(r[n]=t[n]);if(r.recurse_count>8)throw new oe.ErrnoError(32);for(var o=Q.normalizeArray(e.split("/").filter((function(e){return!!e})),!1),i=oe.root,a="/",s=0;s<o.length;s++){var u=s===o.length-1;if(u&&r.parent)break;if(i=oe.lookupNode(i,o[s]),a=Q.join2(a,o[s]),oe.isMountpoint(i)&&(!u||u&&r.follow_mount)&&(i=i.mounted.root),!u||r.follow)for(var c=0;oe.isLink(i.mode);){var l=oe.readlink(a);if(a=re.resolve(Q.dirname(a),l),i=oe.lookupPath(a,{recurse_count:r.recurse_count}).node,c++>40)throw new oe.ErrnoError(32)}}return{path:a,node:i}},getPath:function(e){for(var r;;){if(oe.isRoot(e)){var t=e.mount.mountpoint;return r?"/"!==t[t.length-1]?t+"/"+r:t+r:t}r=r?e.name+"/"+r:e.name,e=e.parent}},hashName:function(e,r){for(var t=0,n=0;n<r.length;n++)t=(t<<5)-t+r.charCodeAt(n)|0;return(e+t>>>0)%oe.nameTable.length},hashAddNode:function(e){var r=oe.hashName(e.parent.id,e.name);e.name_next=oe.nameTable[r],oe.nameTable[r]=e},hashRemoveNode:function(e){var r=oe.hashName(e.parent.id,e.name);if(oe.nameTable[r]===e)oe.nameTable[r]=e.name_next;else for(var t=oe.nameTable[r];t;){if(t.name_next===e){t.name_next=e.name_next;break}t=t.name_next}},lookupNode:function(e,r){var t=oe.mayLookup(e);if(t)throw new oe.ErrnoError(t,e);for(var n=oe.hashName(e.id,r),o=oe.nameTable[n];o;o=o.name_next){var i=o.name;if(o.parent.id===e.id&&i===r)return o}return oe.lookup(e,r)},createNode:function(e,r,t,n){var o=new oe.FSNode(e,r,t,n);return oe.hashAddNode(o),o},destroyNode:function(e){oe.hashRemoveNode(e)},isRoot:function(e){return e===e.parent},isMountpoint:function(e){return!!e.mounted},isFile:function(e){return 32768==(61440&e)},isDir:function(e){return 16384==(61440&e)},isLink:function(e){return 40960==(61440&e)},isChrdev:function(e){return 8192==(61440&e)},isBlkdev:function(e){return 24576==(61440&e)},isFIFO:function(e){return 4096==(61440&e)},isSocket:function(e){return 49152==(49152&e)},flagModes:{r:0,rs:1052672,"r+":2,w:577,wx:705,xw:705,"w+":578,"wx+":706,"xw+":706,a:1089,ax:1217,xa:1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(e){var r=oe.flagModes[e];if(void 0===r)throw new Error("Unknown file open mode: "+e);return r},flagsToPermissionString:function(e){var r=["r","w","rw"][3&e];return 512&e&&(r+="w"),r},nodePermissions:function(e,r){return oe.ignorePermissions||(-1===r.indexOf("r")||292&e.mode)&&(-1===r.indexOf("w")||146&e.mode)&&(-1===r.indexOf("x")||73&e.mode)?0:2},mayLookup:function(e){return oe.nodePermissions(e,"x")||(e.node_ops.lookup?0:2)},mayCreate:function(e,r){try{return oe.lookupNode(e,r),20}catch(e){}return oe.nodePermissions(e,"wx")},mayDelete:function(e,r,t){var n;try{n=oe.lookupNode(e,r)}catch(e){return e.errno}var o=oe.nodePermissions(e,"wx");if(o)return o;if(t){if(!oe.isDir(n.mode))return 54;if(oe.isRoot(n)||oe.getPath(n)===oe.cwd())return 10}else if(oe.isDir(n.mode))return 31;return 0},mayOpen:function(e,r){return e?oe.isLink(e.mode)?32:oe.isDir(e.mode)&&("r"!==oe.flagsToPermissionString(r)||512&r)?31:oe.nodePermissions(e,oe.flagsToPermissionString(r)):44},MAX_OPEN_FDS:4096,nextfd:function(e,r){e=e||0,r=r||oe.MAX_OPEN_FDS;for(var t=e;t<=r;t++)if(!oe.streams[t])return t;throw new oe.ErrnoError(33)},getStream:function(e){return oe.streams[e]},createStream:function(e,r,t){oe.FSStream||(oe.FSStream=function(){},oe.FSStream.prototype={object:{get:function(){return this.node},set:function(e){this.node=e}},isRead:{get:function(){return 1!=(2097155&this.flags)}},isWrite:{get:function(){return 0!=(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}}});var n=new oe.FSStream;for(var o in e)n[o]=e[o];e=n;var i=oe.nextfd(r,t);return e.fd=i,oe.streams[i]=e,e},closeStream:function(e){oe.streams[e]=null},chrdev_stream_ops:{open:function(e){var r=oe.getDevice(e.node.rdev);e.stream_ops=r.stream_ops,e.stream_ops.open&&e.stream_ops.open(e)},llseek:function(){throw new oe.ErrnoError(70)}},major:function(e){return e>>8},minor:function(e){return 255&e},makedev:function(e,r){return e<<8|r},registerDevice:function(e,r){oe.devices[e]={stream_ops:r}},getDevice:function(e){return oe.devices[e]},getMounts:function(e){for(var r=[],t=[e];t.length;){var n=t.pop();r.push(n),t.push.apply(t,n.mounts)}return r},syncfs:function(e,r){"function"==typeof e&&(r=e,e=!1),oe.syncFSRequests++,oe.syncFSRequests>1&&v("warning: "+oe.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var t=oe.getMounts(oe.root.mount),n=0;function o(e){return oe.syncFSRequests--,r(e)}function i(e){if(e)return i.errored?void 0:(i.errored=!0,o(e));++n>=t.length&&o(null)}t.forEach((function(r){if(!r.type.syncfs)return i(null);r.type.syncfs(r,e,i)}))},mount:function(e,r,t){var n,o="/"===t,i=!t;if(o&&oe.root)throw new oe.ErrnoError(10);if(!o&&!i){var a=oe.lookupPath(t,{follow_mount:!1});if(t=a.path,n=a.node,oe.isMountpoint(n))throw new oe.ErrnoError(10);if(!oe.isDir(n.mode))throw new oe.ErrnoError(54)}var s={type:e,opts:r,mountpoint:t,mounts:[]},u=e.mount(s);return u.mount=s,s.root=u,o?oe.root=u:n&&(n.mounted=s,n.mount&&n.mount.mounts.push(s)),u},unmount:function(e){var r=oe.lookupPath(e,{follow_mount:!1});if(!oe.isMountpoint(r.node))throw new oe.ErrnoError(28);var t=r.node,n=t.mounted,o=oe.getMounts(n);Object.keys(oe.nameTable).forEach((function(e){for(var r=oe.nameTable[e];r;){var t=r.name_next;-1!==o.indexOf(r.mount)&&oe.destroyNode(r),r=t}})),t.mounted=null;var i=t.mount.mounts.indexOf(n);t.mount.mounts.splice(i,1)},lookup:function(e,r){return e.node_ops.lookup(e,r)},mknod:function(e,r,t){var n=oe.lookupPath(e,{parent:!0}).node,o=Q.basename(e);if(!o||"."===o||".."===o)throw new oe.ErrnoError(28);var i=oe.mayCreate(n,o);if(i)throw new oe.ErrnoError(i);if(!n.node_ops.mknod)throw new oe.ErrnoError(63);return n.node_ops.mknod(n,o,r,t)},create:function(e,r){return r=void 0!==r?r:438,r&=4095,r|=32768,oe.mknod(e,r,0)},mkdir:function(e,r){return r=void 0!==r?r:511,r&=1023,r|=16384,oe.mknod(e,r,0)},mkdirTree:function(e,r){for(var t=e.split("/"),n="",o=0;o<t.length;++o)if(t[o]){n+="/"+t[o];try{oe.mkdir(n,r)}catch(e){if(20!=e.errno)throw e}}},mkdev:function(e,r,t){return void 0===t&&(t=r,r=438),r|=8192,oe.mknod(e,r,t)},symlink:function(e,r){if(!re.resolve(e))throw new oe.ErrnoError(44);var t=oe.lookupPath(r,{parent:!0}).node;if(!t)throw new oe.ErrnoError(44);var n=Q.basename(r),o=oe.mayCreate(t,n);if(o)throw new oe.ErrnoError(o);if(!t.node_ops.symlink)throw new oe.ErrnoError(63);return t.node_ops.symlink(t,n,e)},rename:function(e,r){var t,n,o=Q.dirname(e),i=Q.dirname(r),a=Q.basename(e),s=Q.basename(r);if(t=oe.lookupPath(e,{parent:!0}).node,n=oe.lookupPath(r,{parent:!0}).node,!t||!n)throw new oe.ErrnoError(44);if(t.mount!==n.mount)throw new oe.ErrnoError(75);var u,c=oe.lookupNode(t,a),l=re.relative(e,i);if("."!==l.charAt(0))throw new oe.ErrnoError(28);if("."!==(l=re.relative(r,o)).charAt(0))throw new oe.ErrnoError(55);try{u=oe.lookupNode(n,s)}catch(e){}if(c!==u){var f=oe.isDir(c.mode),d=oe.mayDelete(t,a,f);if(d)throw new oe.ErrnoError(d);if(d=u?oe.mayDelete(n,s,f):oe.mayCreate(n,s))throw new oe.ErrnoError(d);if(!t.node_ops.rename)throw new oe.ErrnoError(63);if(oe.isMountpoint(c)||u&&oe.isMountpoint(u))throw new oe.ErrnoError(10);if(n!==t&&(d=oe.nodePermissions(t,"w")))throw new oe.ErrnoError(d);try{oe.trackingDelegate.willMovePath&&oe.trackingDelegate.willMovePath(e,r)}catch(t){v("FS.trackingDelegate['willMovePath']('"+e+"', '"+r+"') threw an exception: "+t.message)}oe.hashRemoveNode(c);try{t.node_ops.rename(c,n,s)}catch(e){throw e}finally{oe.hashAddNode(c)}try{oe.trackingDelegate.onMovePath&&oe.trackingDelegate.onMovePath(e,r)}catch(t){v("FS.trackingDelegate['onMovePath']('"+e+"', '"+r+"') threw an exception: "+t.message)}}},rmdir:function(e){var r=oe.lookupPath(e,{parent:!0}).node,t=Q.basename(e),n=oe.lookupNode(r,t),o=oe.mayDelete(r,t,!0);if(o)throw new oe.ErrnoError(o);if(!r.node_ops.rmdir)throw new oe.ErrnoError(63);if(oe.isMountpoint(n))throw new oe.ErrnoError(10);try{oe.trackingDelegate.willDeletePath&&oe.trackingDelegate.willDeletePath(e)}catch(r){v("FS.trackingDelegate['willDeletePath']('"+e+"') threw an exception: "+r.message)}r.node_ops.rmdir(r,t),oe.destroyNode(n);try{oe.trackingDelegate.onDeletePath&&oe.trackingDelegate.onDeletePath(e)}catch(r){v("FS.trackingDelegate['onDeletePath']('"+e+"') threw an exception: "+r.message)}},readdir:function(e){var r=oe.lookupPath(e,{follow:!0}).node;if(!r.node_ops.readdir)throw new oe.ErrnoError(54);return r.node_ops.readdir(r)},unlink:function(e){var r=oe.lookupPath(e,{parent:!0}).node,t=Q.basename(e),n=oe.lookupNode(r,t),o=oe.mayDelete(r,t,!1);if(o)throw new oe.ErrnoError(o);if(!r.node_ops.unlink)throw new oe.ErrnoError(63);if(oe.isMountpoint(n))throw new oe.ErrnoError(10);try{oe.trackingDelegate.willDeletePath&&oe.trackingDelegate.willDeletePath(e)}catch(r){v("FS.trackingDelegate['willDeletePath']('"+e+"') threw an exception: "+r.message)}r.node_ops.unlink(r,t),oe.destroyNode(n);try{oe.trackingDelegate.onDeletePath&&oe.trackingDelegate.onDeletePath(e)}catch(r){v("FS.trackingDelegate['onDeletePath']('"+e+"') threw an exception: "+r.message)}},readlink:function(e){var r=oe.lookupPath(e).node;if(!r)throw new oe.ErrnoError(44);if(!r.node_ops.readlink)throw new oe.ErrnoError(28);return re.resolve(oe.getPath(r.parent),r.node_ops.readlink(r))},stat:function(e,r){var t=oe.lookupPath(e,{follow:!r}).node;if(!t)throw new oe.ErrnoError(44);if(!t.node_ops.getattr)throw new oe.ErrnoError(63);return t.node_ops.getattr(t)},lstat:function(e){return oe.stat(e,!0)},chmod:function(e,r,t){var n;if(!(n="string"==typeof e?oe.lookupPath(e,{follow:!t}).node:e).node_ops.setattr)throw new oe.ErrnoError(63);n.node_ops.setattr(n,{mode:4095&r|-4096&n.mode,timestamp:Date.now()})},lchmod:function(e,r){oe.chmod(e,r,!0)},fchmod:function(e,r){var t=oe.getStream(e);if(!t)throw new oe.ErrnoError(8);oe.chmod(t.node,r)},chown:function(e,r,t,n){var o;if(!(o="string"==typeof e?oe.lookupPath(e,{follow:!n}).node:e).node_ops.setattr)throw new oe.ErrnoError(63);o.node_ops.setattr(o,{timestamp:Date.now()})},lchown:function(e,r,t){oe.chown(e,r,t,!0)},fchown:function(e,r,t){var n=oe.getStream(e);if(!n)throw new oe.ErrnoError(8);oe.chown(n.node,r,t)},truncate:function(e,r){if(r<0)throw new oe.ErrnoError(28);var t;if(!(t="string"==typeof e?oe.lookupPath(e,{follow:!0}).node:e).node_ops.setattr)throw new oe.ErrnoError(63);if(oe.isDir(t.mode))throw new oe.ErrnoError(31);if(!oe.isFile(t.mode))throw new oe.ErrnoError(28);var n=oe.nodePermissions(t,"w");if(n)throw new oe.ErrnoError(n);t.node_ops.setattr(t,{size:r,timestamp:Date.now()})},ftruncate:function(e,r){var t=oe.getStream(e);if(!t)throw new oe.ErrnoError(8);if(0==(2097155&t.flags))throw new oe.ErrnoError(28);oe.truncate(t.node,r)},utime:function(e,r,t){var n=oe.lookupPath(e,{follow:!0}).node;n.node_ops.setattr(n,{timestamp:Math.max(r,t)})},open:function(e,r,t,n,i){if(""===e)throw new oe.ErrnoError(44);var a;if(t=void 0===t?438:t,t=64&(r="string"==typeof r?oe.modeStringToFlags(r):r)?4095&t|32768:0,"object"==typeof e)a=e;else{e=Q.normalize(e);try{a=oe.lookupPath(e,{follow:!(131072&r)}).node}catch(e){}}var s=!1;if(64&r)if(a){if(128&r)throw new oe.ErrnoError(20)}else a=oe.mknod(e,t,0),s=!0;if(!a)throw new oe.ErrnoError(44);if(oe.isChrdev(a.mode)&&(r&=-513),65536&r&&!oe.isDir(a.mode))throw new oe.ErrnoError(54);if(!s){var u=oe.mayOpen(a,r);if(u)throw new oe.ErrnoError(u)}512&r&&oe.truncate(a,0),r&=-131713;var c=oe.createStream({node:a,path:oe.getPath(a),flags:r,seekable:!0,position:0,stream_ops:a.stream_ops,ungotten:[],error:!1},n,i);c.stream_ops.open&&c.stream_ops.open(c),!o.logReadFiles||1&r||(oe.readFiles||(oe.readFiles={}),e in oe.readFiles||(oe.readFiles[e]=1,v("FS.trackingDelegate error on read file: "+e)));try{if(oe.trackingDelegate.onOpenFile){var l=0;1!=(2097155&r)&&(l|=oe.tracking.openFlags.READ),0!=(2097155&r)&&(l|=oe.tracking.openFlags.WRITE),oe.trackingDelegate.onOpenFile(e,l)}}catch(r){v("FS.trackingDelegate['onOpenFile']('"+e+"', flags) threw an exception: "+r.message)}return c},close:function(e){if(oe.isClosed(e))throw new oe.ErrnoError(8);e.getdents&&(e.getdents=null);try{e.stream_ops.close&&e.stream_ops.close(e)}catch(e){throw e}finally{oe.closeStream(e.fd)}e.fd=null},isClosed:function(e){return null===e.fd},llseek:function(e,r,t){if(oe.isClosed(e))throw new oe.ErrnoError(8);if(!e.seekable||!e.stream_ops.llseek)throw new oe.ErrnoError(70);if(0!=t&&1!=t&&2!=t)throw new oe.ErrnoError(28);return e.position=e.stream_ops.llseek(e,r,t),e.ungotten=[],e.position},read:function(e,r,t,n,o){if(n<0||o<0)throw new oe.ErrnoError(28);if(oe.isClosed(e))throw new oe.ErrnoError(8);if(1==(2097155&e.flags))throw new oe.ErrnoError(8);if(oe.isDir(e.node.mode))throw new oe.ErrnoError(31);if(!e.stream_ops.read)throw new oe.ErrnoError(28);var i=void 0!==o;if(i){if(!e.seekable)throw new oe.ErrnoError(70)}else o=e.position;var a=e.stream_ops.read(e,r,t,n,o);return i||(e.position+=a),a},write:function(e,r,t,n,o,i){if(n<0||o<0)throw new oe.ErrnoError(28);if(oe.isClosed(e))throw new oe.ErrnoError(8);if(0==(2097155&e.flags))throw new oe.ErrnoError(8);if(oe.isDir(e.node.mode))throw new oe.ErrnoError(31);if(!e.stream_ops.write)throw new oe.ErrnoError(28);e.seekable&&1024&e.flags&&oe.llseek(e,0,2);var a=void 0!==o;if(a){if(!e.seekable)throw new oe.ErrnoError(70)}else o=e.position;var s=e.stream_ops.write(e,r,t,n,o,i);a||(e.position+=s);try{e.path&&oe.trackingDelegate.onWriteToFile&&oe.trackingDelegate.onWriteToFile(e.path)}catch(r){v("FS.trackingDelegate['onWriteToFile']('"+e.path+"') threw an exception: "+r.message)}return s},allocate:function(e,r,t){if(oe.isClosed(e))throw new oe.ErrnoError(8);if(r<0||t<=0)throw new oe.ErrnoError(28);if(0==(2097155&e.flags))throw new oe.ErrnoError(8);if(!oe.isFile(e.node.mode)&&!oe.isDir(e.node.mode))throw new oe.ErrnoError(43);if(!e.stream_ops.allocate)throw new oe.ErrnoError(138);e.stream_ops.allocate(e,r,t)},mmap:function(e,r,t,n,o,i){if(0!=(2&o)&&0==(2&i)&&2!=(2097155&e.flags))throw new oe.ErrnoError(2);if(1==(2097155&e.flags))throw new oe.ErrnoError(2);if(!e.stream_ops.mmap)throw new oe.ErrnoError(43);return e.stream_ops.mmap(e,r,t,n,o,i)},msync:function(e,r,t,n,o){return e&&e.stream_ops.msync?e.stream_ops.msync(e,r,t,n,o):0},munmap:function(e){return 0},ioctl:function(e,r,t){if(!e.stream_ops.ioctl)throw new oe.ErrnoError(59);return e.stream_ops.ioctl(e,r,t)},readFile:function(e,r){if((r=r||{}).flags=r.flags||"r",r.encoding=r.encoding||"binary","utf8"!==r.encoding&&"binary"!==r.encoding)throw new Error('Invalid encoding type "'+r.encoding+'"');var t,n=oe.open(e,r.flags),o=oe.stat(e).size,i=new Uint8Array(o);return oe.read(n,i,0,o,0),"utf8"===r.encoding?t=P(i,0):"binary"===r.encoding&&(t=i),oe.close(n),t},writeFile:function(e,r,t){(t=t||{}).flags=t.flags||"w";var n=oe.open(e,t.flags,t.mode);if("string"==typeof r){var o=new Uint8Array(R(r)+1),i=x(r,o,0,o.length);oe.write(n,o,0,i,void 0,t.canOwn)}else{if(!ArrayBuffer.isView(r))throw new Error("Unsupported data type");oe.write(n,r,0,r.byteLength,void 0,t.canOwn)}oe.close(n)},cwd:function(){return oe.currentPath},chdir:function(e){var r=oe.lookupPath(e,{follow:!0});if(null===r.node)throw new oe.ErrnoError(44);if(!oe.isDir(r.node.mode))throw new oe.ErrnoError(54);var t=oe.nodePermissions(r.node,"x");if(t)throw new oe.ErrnoError(t);oe.currentPath=r.path},createDefaultDirectories:function(){oe.mkdir("/tmp"),oe.mkdir("/home"),oe.mkdir("/home/web_user")},createDefaultDevices:function(){oe.mkdir("/dev"),oe.registerDevice(oe.makedev(1,3),{read:function(){return 0},write:function(e,r,t,n,o){return n}}),oe.mkdev("/dev/null",oe.makedev(1,3)),te.register(oe.makedev(5,0),te.default_tty_ops),te.register(oe.makedev(6,0),te.default_tty1_ops),oe.mkdev("/dev/tty",oe.makedev(5,0)),oe.mkdev("/dev/tty1",oe.makedev(6,0));var e=function(){if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues){var e=new Uint8Array(1);return function(){return crypto.getRandomValues(e),e[0]}}return function(){q("randomDevice")}}();oe.createDevice("/dev","random",e),oe.createDevice("/dev","urandom",e),oe.mkdir("/dev/shm"),oe.mkdir("/dev/shm/tmp")},createSpecialDirectories:function(){oe.mkdir("/proc"),oe.mkdir("/proc/self"),oe.mkdir("/proc/self/fd"),oe.mount({mount:function(){var e=oe.createNode("/proc/self","fd",16895,73);return e.node_ops={lookup:function(e,r){var t=+r,n=oe.getStream(t);if(!n)throw new oe.ErrnoError(8);var o={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return n.path}}};return o.parent=o,o}},e}},{},"/proc/self/fd")},createStandardStreams:function(){o.stdin?oe.createDevice("/dev","stdin",o.stdin):oe.symlink("/dev/tty","/dev/stdin"),o.stdout?oe.createDevice("/dev","stdout",null,o.stdout):oe.symlink("/dev/tty","/dev/stdout"),o.stderr?oe.createDevice("/dev","stderr",null,o.stderr):oe.symlink("/dev/tty1","/dev/stderr"),oe.open("/dev/stdin","r"),oe.open("/dev/stdout","w"),oe.open("/dev/stderr","w")},ensureErrnoError:function(){oe.ErrnoError||(oe.ErrnoError=function(e,r){this.node=r,this.setErrno=function(e){this.errno=e},this.setErrno(e),this.message="FS error"},oe.ErrnoError.prototype=new Error,oe.ErrnoError.prototype.constructor=oe.ErrnoError,[44].forEach((function(e){oe.genericErrors[e]=new oe.ErrnoError(e),oe.genericErrors[e].stack="<generic error, no stack>"})))},staticInit:function(){oe.ensureErrnoError(),oe.nameTable=new Array(4096),oe.mount(ne,{},"/"),oe.createDefaultDirectories(),oe.createDefaultDevices(),oe.createSpecialDirectories(),oe.filesystems={MEMFS:ne}},init:function(e,r,t){oe.init.initialized=!0,oe.ensureErrnoError(),o.stdin=e||o.stdin,o.stdout=r||o.stdout,o.stderr=t||o.stderr,oe.createStandardStreams()},quit:function(){oe.init.initialized=!1;var e=o._fflush;e&&e(0);for(var r=0;r<oe.streams.length;r++){var t=oe.streams[r];t&&oe.close(t)}},getMode:function(e,r){var t=0;return e&&(t|=365),r&&(t|=146),t},findObject:function(e,r){var t=oe.analyzePath(e,r);return t.exists?t.object:(ee(t.error),null)},analyzePath:function(e,r){try{e=(n=oe.lookupPath(e,{follow:!r})).path}catch(e){}var t={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var n=oe.lookupPath(e,{parent:!0});t.parentExists=!0,t.parentPath=n.path,t.parentObject=n.node,t.name=Q.basename(e),n=oe.lookupPath(e,{follow:!r}),t.exists=!0,t.path=n.path,t.object=n.node,t.name=n.node.name,t.isRoot="/"===n.path}catch(e){t.error=e.errno}return t},createPath:function(e,r,t,n){e="string"==typeof e?e:oe.getPath(e);for(var o=r.split("/").reverse();o.length;){var i=o.pop();if(i){var a=Q.join2(e,i);try{oe.mkdir(a)}catch(e){}e=a}}return a},createFile:function(e,r,t,n,o){var i=Q.join2("string"==typeof e?e:oe.getPath(e),r),a=oe.getMode(n,o);return oe.create(i,a)},createDataFile:function(e,r,t,n,o,i){var a=r?Q.join2("string"==typeof e?e:oe.getPath(e),r):e,s=oe.getMode(n,o),u=oe.create(a,s);if(t){if("string"==typeof t){for(var c=new Array(t.length),l=0,f=t.length;l<f;++l)c[l]=t.charCodeAt(l);t=c}oe.chmod(u,146|s);var d=oe.open(u,"w");oe.write(d,t,0,t.length,0,i),oe.close(d),oe.chmod(u,s)}return u},createDevice:function(e,r,t,n){var o=Q.join2("string"==typeof e?e:oe.getPath(e),r),i=oe.getMode(!!t,!!n);oe.createDevice.major||(oe.createDevice.major=64);var a=oe.makedev(oe.createDevice.major++,0);return oe.registerDevice(a,{open:function(e){e.seekable=!1},close:function(e){n&&n.buffer&&n.buffer.length&&n(10)},read:function(e,r,n,o,i){for(var a=0,s=0;s<o;s++){var u;try{u=t()}catch(e){throw new oe.ErrnoError(29)}if(void 0===u&&0===a)throw new oe.ErrnoError(6);if(null==u)break;a++,r[n+s]=u}return a&&(e.node.timestamp=Date.now()),a},write:function(e,r,t,o,i){for(var a=0;a<o;a++)try{n(r[t+a])}catch(e){throw new oe.ErrnoError(29)}return o&&(e.node.timestamp=Date.now()),a}}),oe.mkdev(o,i,a)},forceLoadFile:function(e){if(e.isDevice||e.isFolder||e.link||e.contents)return!0;var r=!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!s)throw new Error("Cannot load without read() or XMLHttpRequest.");try{e.contents=se(s(e.url),!0),e.usedBytes=e.contents.length}catch(e){r=!1}return r||ee(29),r},createLazyFile:function(e,r,t,n,o){function i(){this.lengthKnown=!1,this.chunks=[]}if(i.prototype.get=function(e){if(!(e>this.length-1||e<0)){var r=e%this.chunkSize,t=e/this.chunkSize|0;return this.getter(t)[r]}},i.prototype.setDataGetter=function(e){this.getter=e},i.prototype.cacheLength=function(){var e=new XMLHttpRequest;if(e.open("HEAD",t,!1),e.send(null),!(e.status>=200&&e.status<300||304===e.status))throw new Error("Couldn't load "+t+". Status: "+e.status);var r,n=Number(e.getResponseHeader("Content-length")),o=(r=e.getResponseHeader("Accept-Ranges"))&&"bytes"===r,i=(r=e.getResponseHeader("Content-Encoding"))&&"gzip"===r,a=1048576;o||(a=n);var s=this;s.setDataGetter((function(e){var r=e*a,o=(e+1)*a-1;if(o=Math.min(o,n-1),void 0===s.chunks[e]&&(s.chunks[e]=function(e,r){if(e>r)throw new Error("invalid range ("+e+", "+r+") or no bytes requested!");if(r>n-1)throw new Error("only "+n+" bytes available! programmer error!");var o=new XMLHttpRequest;if(o.open("GET",t,!1),n!==a&&o.setRequestHeader("Range","bytes="+e+"-"+r),"undefined"!=typeof Uint8Array&&(o.responseType="arraybuffer"),o.overrideMimeType&&o.overrideMimeType("text/plain; charset=x-user-defined"),o.send(null),!(o.status>=200&&o.status<300||304===o.status))throw new Error("Couldn't load "+t+". Status: "+o.status);return void 0!==o.response?new Uint8Array(o.response||[]):se(o.responseText||"",!0)}(r,o)),void 0===s.chunks[e])throw new Error("doXHR failed!");return s.chunks[e]})),!i&&n||(a=n=1,n=this.getter(0).length,a=n,w("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=n,this._chunkSize=a,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var a={isDevice:!1,url:t},s=oe.createFile(e,r,a,n,o);a.contents?s.contents=a.contents:a.url&&(s.contents=null,s.url=a.url),Object.defineProperties(s,{usedBytes:{get:function(){return this.contents.length}}});var u={};return Object.keys(s.stream_ops).forEach((function(e){var r=s.stream_ops[e];u[e]=function(){if(!oe.forceLoadFile(s))throw new oe.ErrnoError(29);return r.apply(null,arguments)}})),u.read=function(e,r,t,n,o){if(!oe.forceLoadFile(s))throw new oe.ErrnoError(29);var i=e.node.contents;if(o>=i.length)return 0;var a=Math.min(i.length-o,n);if(i.slice)for(var u=0;u<a;u++)r[t+u]=i[o+u];else for(u=0;u<a;u++)r[t+u]=i.get(o+u);return a},s.stream_ops=u,s},createPreloadedFile:function(e,r,t,n,i,a,s,u,c,l){Browser.init();var f=r?re.resolve(Q.join2(e,r)):e;function d(t){function d(t){l&&l(),u||oe.createDataFile(e,r,t,n,i,c),a&&a(),U()}var h=!1;o.preloadPlugins.forEach((function(e){h||e.canHandle(f)&&(e.handle(t,f,d,(function(){s&&s(),U()})),h=!0)})),h||d(t)}H(),"string"==typeof t?Browser.asyncLoad(t,(function(e){d(e)}),s):d(t)},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(e,r,t){r=r||function(){},t=t||function(){};var n=oe.indexedDB();try{var o=n.open(oe.DB_NAME(),oe.DB_VERSION)}catch(e){return t(e)}o.onupgradeneeded=function(){w("creating db"),o.result.createObjectStore(oe.DB_STORE_NAME)},o.onsuccess=function(){var n=o.result.transaction([oe.DB_STORE_NAME],"readwrite"),i=n.objectStore(oe.DB_STORE_NAME),a=0,s=0,u=e.length;function c(){0==s?r():t()}e.forEach((function(e){var r=i.put(oe.analyzePath(e).object.contents,e);r.onsuccess=function(){++a+s==u&&c()},r.onerror=function(){s++,a+s==u&&c()}})),n.onerror=t},o.onerror=t},loadFilesFromDB:function(e,r,t){r=r||function(){},t=t||function(){};var n=oe.indexedDB();try{var o=n.open(oe.DB_NAME(),oe.DB_VERSION)}catch(e){return t(e)}o.onupgradeneeded=t,o.onsuccess=function(){var n=o.result;try{var i=n.transaction([oe.DB_STORE_NAME],"readonly")}catch(e){return void t(e)}var a=i.objectStore(oe.DB_STORE_NAME),s=0,u=0,c=e.length;function l(){0==u?r():t()}e.forEach((function(e){var r=a.get(e);r.onsuccess=function(){oe.analyzePath(e).exists&&oe.unlink(e),oe.createDataFile(Q.dirname(e),Q.basename(e),r.result,!0,!0,!0),++s+u==c&&l()},r.onerror=function(){u++,s+u==c&&l()}})),i.onerror=t},o.onerror=t}},ie={mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(e,r){if("/"!==r[0]){var t;if(-100===e)t=oe.cwd();else{var n=oe.getStream(e);if(!n)throw new oe.ErrnoError(8);t=n.path}r=Q.join2(t,r)}return r},doStat:function(e,r,t){try{var n=e(r)}catch(e){if(e&&e.node&&Q.normalize(r)!==Q.normalize(oe.getPath(e.node)))return-54;throw e}return S[t>>2]=n.dev,S[t+4>>2]=0,S[t+8>>2]=n.ino,S[t+12>>2]=n.mode,S[t+16>>2]=n.nlink,S[t+20>>2]=n.uid,S[t+24>>2]=n.gid,S[t+28>>2]=n.rdev,S[t+32>>2]=0,Z=[n.size>>>0,(V=n.size,+Math.abs(V)>=1?V>0?(0|Math.min(+Math.floor(V/4294967296),4294967295))>>>0:~~+Math.ceil((V-+(~~V>>>0))/4294967296)>>>0:0)],S[t+40>>2]=Z[0],S[t+44>>2]=Z[1],S[t+48>>2]=4096,S[t+52>>2]=n.blocks,S[t+56>>2]=n.atime.getTime()/1e3|0,S[t+60>>2]=0,S[t+64>>2]=n.mtime.getTime()/1e3|0,S[t+68>>2]=0,S[t+72>>2]=n.ctime.getTime()/1e3|0,S[t+76>>2]=0,Z=[n.ino>>>0,(V=n.ino,+Math.abs(V)>=1?V>0?(0|Math.min(+Math.floor(V/4294967296),4294967295))>>>0:~~+Math.ceil((V-+(~~V>>>0))/4294967296)>>>0:0)],S[t+80>>2]=Z[0],S[t+84>>2]=Z[1],0},doMsync:function(e,r,t,n,o){var i=D.slice(e,e+t);oe.msync(r,i,o,t,n)},doMkdir:function(e,r){return"/"===(e=Q.normalize(e))[e.length-1]&&(e=e.substr(0,e.length-1)),oe.mkdir(e,r,0),0},doMknod:function(e,r,t){switch(61440&r){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-28}return oe.mknod(e,r,t),0},doReadlink:function(e,r,t){if(t<=0)return-28;var n=oe.readlink(e),o=Math.min(t,R(n)),i=_[r+o];return M(n,r,t+1),_[r+o]=i,o},doAccess:function(e,r){if(-8&r)return-28;var t;if(!(t=oe.lookupPath(e,{follow:!0}).node))return-44;var n="";return 4&r&&(n+="r"),2&r&&(n+="w"),1&r&&(n+="x"),n&&oe.nodePermissions(t,n)?-2:0},doDup:function(e,r,t){var n=oe.getStream(t);return n&&oe.close(n),oe.open(e,r,0,t,t).fd},doReadv:function(e,r,t,n){for(var o=0,i=0;i<t;i++){var a=S[r+8*i>>2],s=S[r+(8*i+4)>>2],u=oe.read(e,_,a,s,n);if(u<0)return-1;if(o+=u,u<s)break}return o},doWritev:function(e,r,t,n){for(var o=0,i=0;i<t;i++){var a=S[r+8*i>>2],s=S[r+(8*i+4)>>2],u=oe.write(e,_,a,s,n);if(u<0)return-1;o+=u}return o},varargs:void 0,get:function(){return ie.varargs+=4,S[ie.varargs-4>>2]},getStr:function(e){return F(e)},getStreamFromFD:function(e){var r=oe.getStream(e);if(!r)throw new oe.ErrnoError(8);return r},get64:function(e,r){return e}},ae=function(e,r,t,n){e||(e=this),this.parent=e,this.mount=e.mount,this.mounted=null,this.id=oe.nextInode++,this.name=r,this.mode=t,this.node_ops={},this.stream_ops={},this.rdev=n};function se(e,r,t){var n=t>0?t:R(e)+1,o=new Array(n),i=x(e,o,0,o.length);return r&&(o.length=i),o}Object.defineProperties(ae.prototype,{read:{get:function(){return 365==(365&this.mode)},set:function(e){e?this.mode|=365:this.mode&=-366}},write:{get:function(){return 146==(146&this.mode)},set:function(e){e?this.mode|=146:this.mode&=-147}},isFolder:{get:function(){return oe.isDir(this.mode)}},isDevice:{get:function(){return oe.isChrdev(this.mode)}}}),oe.FSNode=ae,oe.staticInit(),I.push({func:function(){le()}});var ue,ce={e:function(e,r,t){D.copyWithin(e,r,r+t)},f:function(e){e>>>=0;var r=D.length,t=2147483648;if(e>t)return!1;for(var n,o=1;o<=4;o*=2){var i=r*(1+.2/o);if(i=Math.min(i,e+100663296),J(Math.min(t,((n=Math.max(16777216,e,i))%65536>0&&(n+=65536-n%65536),n))))return!0}return!1},h:function(e){try{var r=ie.getStreamFromFD(e);return oe.close(r),0}catch(e){return void 0!==oe&&e instanceof oe.ErrnoError||q(e),e.errno}},g:function(e,r,t,n){try{var o=ie.getStreamFromFD(e),i=ie.doReadv(o,r,t);return S[n>>2]=i,0}catch(e){return void 0!==oe&&e instanceof oe.ErrnoError||q(e),e.errno}},d:function(e,r,t,n,o){try{var i=ie.getStreamFromFD(e),a=4294967296*t+(r>>>0),s=9007199254740992;return a<=-s||a>=s?-61:(oe.llseek(i,a,n),Z=[i.position>>>0,(V=i.position,+Math.abs(V)>=1?V>0?(0|Math.min(+Math.floor(V/4294967296),4294967295))>>>0:~~+Math.ceil((V-+(~~V>>>0))/4294967296)>>>0:0)],S[o>>2]=Z[0],S[o+4>>2]=Z[1],i.getdents&&0===a&&0===n&&(i.getdents=null),0)}catch(e){return void 0!==oe&&e instanceof oe.ErrnoError||q(e),e.errno}},b:function(e,r,t,n){try{var o=ie.getStreamFromFD(e),i=ie.doWritev(o,r,t);return S[n>>2]=i,0}catch(e){return void 0!==oe&&e instanceof oe.ErrnoError||q(e),e.errno}},a:p,c:function(e){var r=Date.now()/1e3|0;return e&&(S[e>>2]=r),r}},le=(function(){var e={a:ce};function r(e,r){var t=e.exports;o.asm=t,m=o.asm.i,U()}function t(e){r(e.instance)}function n(r){return(d||"function"!=typeof fetch?Promise.resolve().then(Y):fetch(G,{credentials:"same-origin"}).then((function(e){if(!e.ok)throw"failed to load wasm binary file at '"+G+"'";return e.arrayBuffer()})).catch((function(){return Y()}))).then((function(r){return WebAssembly.instantiate(r,e)})).then(r,(function(e){v("failed to asynchronously prepare wasm: "+e),q(e)}))}if(H(),o.instantiateWasm)try{return o.instantiateWasm(e,r)}catch(e){return v("Module.instantiateWasm callback failed with error: "+e),!1}!function(){if(d||"function"!=typeof WebAssembly.instantiateStreaming||X(G)||"function"!=typeof fetch)return n(t);fetch(G,{credentials:"same-origin"}).then((function(r){return WebAssembly.instantiateStreaming(r,e).then(t,(function(e){return v("wasm streaming compile failed: "+e),v("falling back to ArrayBuffer instantiation"),n(t)}))}))}()}(),o.___wasm_call_ctors=function(){return(le=o.___wasm_call_ctors=o.asm.j).apply(null,arguments)}),fe=o._malloc=function(){return(fe=o._malloc=o.asm.k).apply(null,arguments)},de=(o._main=function(){return(o._main=o.asm.l).apply(null,arguments)},o.___errno_location=function(){return(de=o.___errno_location=o.asm.m).apply(null,arguments)}),he=o.stackSave=function(){return(he=o.stackSave=o.asm.n).apply(null,arguments)},pe=o.stackRestore=function(){return(pe=o.stackRestore=o.asm.o).apply(null,arguments)},me=o.stackAlloc=function(){return(me=o.stackAlloc=o.asm.p).apply(null,arguments)};function we(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}function ve(e){function r(){ue||(ue=!0,o.calledRun=!0,g||(o.noFSInit||oe.init.initialized||oe.init(),te.init(),$(I),oe.ignorePermissions=!1,$(O),t(o),o.onRuntimeInitialized&&o.onRuntimeInitialized(),ge&&function(e){var r,t=o._main,n=(e=e||[]).length+1,i=me(4*(n+1));S[i>>2]=B(c);for(var a=1;a<n;a++)S[(i>>2)+a]=B(e[a-1]);S[(i>>2)+n]=0;try{r=t(n,i),h&&0===r||(h||(o.onExit&&o.onExit(r),g=!0),l(r,new we(r)))}catch(e){if(e instanceof we)return;if("unwind"==e)return void(h=!0);var s=e;e&&"object"==typeof e&&e.stack&&(s=[e,e.stack]),v("exception thrown: "+s),l(1,e)}}(e),function(){if(o.postRun)for("function"==typeof o.postRun&&(o.postRun=[o.postRun]);o.postRun.length;)e=o.postRun.shift(),C.unshift(e);var e;$(C)}()))}e=e||u,j>0||(function(){if(o.preRun)for("function"==typeof o.preRun&&(o.preRun=[o.preRun]);o.preRun.length;)e=o.preRun.shift(),N.unshift(e);var e;$(N)}(),j>0||(o.setStatus?(o.setStatus("Running..."),setTimeout((function(){setTimeout((function(){o.setStatus("")}),1),r()}),1)):r()))}if(o.cwrap=function(e,r,t,n){var o=(t=t||[]).every((function(e){return"number"===e}));return"string"!==r&&o&&!n?y(e):function(){return k(e,r,t,arguments)}},W=function e(){ue||ve(),ue||(W=e)},o.run=ve,o.preInit)for("function"==typeof o.preInit&&(o.preInit=[o.preInit]);o.preInit.length>0;)o.preInit.pop()();var ge=!0;return o.noInitialRun&&(ge=!1),h=!0,ve(),e.ready});e.exports=t}},0,[[204,666,216]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,