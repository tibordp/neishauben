(self.webpackChunkneishauben=self.webpackChunkneishauben||[]).push([[179],{424:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(15),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,"body { margin: 0; }\ncanvas { display: block; }","",{version:3,sources:["webpack://src/index.css"],names:[],mappings:"AAAA,OAAO,SAAS,EAAE;AAClB,SAAS,cAAc,EAAE",sourcesContent:["body { margin: 0; }\ncanvas { display: block; }"],sourceRoot:""}]);const s=o},869:(n,t,e)=>{"use strict";var r=e(212),a=e(886),i=e(379),o=e.n(i),s=e(424);o()(s.Z,{insert:"head",singleton:!1}),s.Z.locals;var u=e(134),c=e.n(u);const l=e.p+"95d49065bd0c166c6c76b12275704bb6.wasm",f=[1644970,52480,16776960,16777215,16741632,14555674],p=[20,32,53,12,27,45,7,25,40,2,22,35,9,26,42,15,29,48,14,28,47,17,30,50,19,31,52,6,24,39,4,23,37,1,21,34,0,8,13,3,10,16,5,11,18,46,41,33,49,43,36,51,44,38],d=[0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5];!async function(){var n=await(async()=>{const n=await c()({locateFile:n=>n.endsWith(".wasm")?l:n});return n._init(),{performOperation(t,e){for(var r=n.stackSave(),a=n.stackAlloc(54),i=0;i<54;++i)n.setValue(a+i,t[i]);n._perform(a,e);const o=[];for(i=0;i<54;++i)o[i]=n.getValue(a+i);return n.stackRestore(r),o}}})(),t=new r.xsS,e=new r.cPb(75,window.innerWidth/window.innerHeight,.1,1e3),i=new r.CP7({antialias:!0});i.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(i.domElement);var o=new r.cek(16777215,1.2,100);o.position.set(0,0,5),e.add(o);const s=new r.ZAu,u=[],h=(n,t,e,a)=>{if(void 0!==a){var i=document.createElement("canvas");i.height=100,i.width=100;var o=i.getContext("2d");const n=18,t=""+a;o.font=n+"pt Arial",o.textAlign="center",o.textBaseline="middle",o.fillStyle="white",o.fillText(t,i.width/2,i.height/2);var s=new r.xEZ(i);s.needsUpdate=!0}var u=new r.BKK(.9,.9,1,1);u.center();var c=new r.Wid({color:0,map:s,side:r.ehD}),l=new r.Kj0(u,c);return 0!==n?l.rotateY(n*(Math.PI/2)):0!==t?l.rotateX(-t*(Math.PI/2)):-1==e&&l.rotateY(Math.PI),l.position.set(n/2,t/2,e/2),l.position.multiplyScalar(1.001),l},m=(n,t,e)=>Math.abs(n)+Math.abs(t)+Math.abs(e),v=n=>{const[t,e,r]=n.userData;n.position.set(t,e,r),n.rotation.set(0,0,0)},w=[];for(var b=-1;b<2;++b){const n=[];for(var y=-1;y<2;++y){const t=[];for(var g=-1;g<2;++g){const n=[];switch(m(b,y,g)){case 0:break;case 1:n.push(h(b,y,g));break;case 2:0==b?(n.push(h(b,y,0)),n.push(h(b,0,g))):0==y?(n.push(h(b,y,0)),n.push(h(0,y,g))):0==g&&(n.push(h(b,0,g)),n.push(h(0,y,g)));break;case 3:n.push(h(b,0,0)),n.push(h(0,y,0)),n.push(h(0,0,g))}const e=(A=13421772,k=void 0,S=void 0,k=function(n,t,e,a,i){let o=new r.bnF,s=1e-5,u=.04999;o.absarc(s,s,s,-Math.PI/2,-Math.PI,!0),o.absarc(s,.90002,s,Math.PI,Math.PI/2,!0),o.absarc(.90002,.90002,s,Math.PI/2,0,!0),o.absarc(.90002,s,s,0,-Math.PI/2,!0);let c=new r.$Vf(o,{amount:.9,bevelEnabled:!0,bevelSegments:4,steps:1,bevelSize:u,bevelThickness:a,curveSegments:2});return c.center(),c}(0,0,0,.05),S=new r.Wid({color:A}),new r.Kj0(k,S));e.userData=[b,y,g],v(e),e.add(...n),w.push(...n),s.add(e),t.push(e)}n.push(t)}u.push(n)}var A,k,S;const R=n=>{for(var t=0;t<54;++t)w[p[t]].material.color.setHex(f[n[t]])};var E=[...d];R(E),t.add(s);const I=new a.z(e,i.domElement);function P(n){const t=[[0,0,1],[0,0,-1],[0,1,0],[0,-1,0],[-1,0,0],[1,0,0]],e=[];let r=null;for(var a=-1;a<2;++a)for(var i=-1;i<2;++i)for(var o=-1;o<2;++o)if(!(t[n][0]&&t[n][0]!==a||t[n][1]&&t[n][1]!==i||t[n][2]&&t[n][2]!==o)){const n=u[a+1][i+1][o+1];1==m(a,i,o)&&(r=n),e.push(n)}return[r,e]}I.enableDamping=!0,I.dampingFactor=.25,I.enableZoom=!1,e.position.z=6,t.add(e),window.addEventListener("resize",(()=>{e.aspect=window.innerWidth/window.innerHeight,e.updateProjectionMatrix(),i.setSize(window.innerWidth,window.innerHeight)}),!1);var x=Math.PI/2,M=x,_=0,[C,W]=P(_),H=function(){requestAnimationFrame(H);{M<1e-4&&(E=n.performOperation(E,2*_+1),R(E),M=x,_=(_+1)%6,W.forEach((n=>v(n))),[C,W]=P(_));const t=.07*(1.1-Math.pow((2*M-x)/x,2));M-=t,W.forEach((n=>{!function(n,t,e,r,a){(a=void 0!==a&&a)&&n.parent.localToWorld(n.position),n.position.sub(t),n.position.applyAxisAngle(e,r),n.position.add(t),a&&n.parent.worldToLocal(n.position),n.rotateOnAxis(e,r)}(n,new r.Pa4(0,0,0),C.position,t,!0)}))}i.render(t,e)};H()}()},134:n=>{var t,e=(t="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,function(n){var e,r,a=void 0!==(n=n||{})?n:{};a.ready=new Promise((function(n,t){e=n,r=t}));var i,o={};for(i in a)a.hasOwnProperty(i)&&(o[i]=a[i]);var s=[],u="./this.program",c=function(n,t){throw t},l="";document.currentScript&&(l=document.currentScript.src),t&&(l=t),l=0!==l.indexOf("blob:")?l.substr(0,l.lastIndexOf("/")+1):"",a.print||console.log.bind(console);var f,p,d,h,m=a.printErr||console.warn.bind(console);for(i in o)o.hasOwnProperty(i)&&(a[i]=o[i]);o=null,a.arguments&&(s=a.arguments),a.thisProgram&&(u=a.thisProgram),a.quit&&(c=a.quit),a.wasmBinary&&(f=a.wasmBinary),a.noExitRuntime&&(p=a.noExitRuntime),"object"!=typeof WebAssembly&&B("no native wasm support detected");var v=!1;function w(n){var t=a["_"+n];return t||B("Assertion failed: "+("Cannot call unknown function "+n+", make sure it is exported")),t}function b(n,t,e,r,a){var i={string:function(n){var t=0;if(null!=n&&0!==n){var e=1+(n.length<<2);!function(n,t,e){P(n,A,t,e)}(n,t=G(e),e)}return t},array:function(n){var t=G(n.length);return function(n,t){g.set(n,t)}(n,t),t}},o=w(n),s=[],u=0;if(r)for(var c=0;c<r.length;c++){var l=i[e[c]];l?(0===u&&(u=X()),s[c]=l(r[c])):s[c]=r[c]}var f=o.apply(null,s);return f=function(n){return"string"===t?(e=n)?function(n,t,e){for(var r=t+undefined,a=t;n[a]&&!(a>=r);)++a;if(a-t>16&&n.subarray&&I)return I.decode(n.subarray(t,a));for(var i="";t<a;){var o=n[t++];if(128&o){var s=63&n[t++];if(192!=(224&o)){var u=63&n[t++];if((o=224==(240&o)?(15&o)<<12|s<<6|u:(7&o)<<18|s<<12|u<<6|63&n[t++])<65536)i+=String.fromCharCode(o);else{var c=o-65536;i+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else i+=String.fromCharCode((31&o)<<6|s)}else i+=String.fromCharCode(o)}return i}(A,e):"":"boolean"===t?Boolean(n):n;var e}(f),0!==u&&$(u),f}var y,g,A,k,S,R,E,I="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function P(n,t,e,r){if(!(r>0))return 0;for(var a=e,i=e+r-1,o=0;o<n.length;++o){var s=n.charCodeAt(o);if(s>=55296&&s<=57343&&(s=65536+((1023&s)<<10)|1023&n.charCodeAt(++o)),s<=127){if(e>=i)break;t[e++]=s}else if(s<=2047){if(e+1>=i)break;t[e++]=192|s>>6,t[e++]=128|63&s}else if(s<=65535){if(e+2>=i)break;t[e++]=224|s>>12,t[e++]=128|s>>6&63,t[e++]=128|63&s}else{if(e+3>=i)break;t[e++]=240|s>>18,t[e++]=128|s>>12&63,t[e++]=128|s>>6&63,t[e++]=128|63&s}}return t[e]=0,e-a}function x(n){var t=function(n){for(var t=0,e=0;e<n.length;++e){var r=n.charCodeAt(e);r>=55296&&r<=57343&&(r=65536+((1023&r)<<10)|1023&n.charCodeAt(++e)),r<=127?++t:t+=r<=2047?2:r<=65535?3:4}return t}(n)+1,e=G(t);return P(n,g,e,t),e}var M,_=a.INITIAL_MEMORY||16777216;(d=a.wasmMemory?a.wasmMemory:new WebAssembly.Memory({initial:_/65536,maximum:32768}))&&(y=d.buffer),_=y.byteLength,y=M=y,a.HEAP8=g=new Int8Array(M),a.HEAP16=k=new Int16Array(M),a.HEAP32=S=new Int32Array(M),a.HEAPU8=A=new Uint8Array(M),a.HEAPU16=new Uint16Array(M),a.HEAPU32=new Uint32Array(M),a.HEAPF32=R=new Float32Array(M),a.HEAPF64=E=new Float64Array(M);var C=[],W=[],H=[],O=[],D=0,F=null,T=null;function B(n){a.onAbort&&a.onAbort(n),m(n+=""),v=!0,n="abort("+n+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(n);throw r(t),t}function z(n){return t=n,e="data:application/octet-stream;base64,",String.prototype.startsWith?t.startsWith(e):0===t.indexOf(e);var t,e}a.preloadedImages={},a.preloadedAudios={};var U,V,j,Z="rubiks.wasm";function K(){try{if(f)return new Uint8Array(f);throw"both async and sync fetching of the wasm failed"}catch(n){B(n)}}function L(n){for(;n.length>0;){var t=n.shift();if("function"!=typeof t){var e=t.func;"number"==typeof e?void 0===t.arg?h.get(e)():h.get(e)(t.arg):e(void 0===t.arg?null:t.arg)}else t(a)}}z(Z)||(U=Z,Z=a.locateFile?a.locateFile(U,l):l+U),W.push({func:function(){N()}});var q,Y={a:d,b:function(n){var t=Date.now()/1e3|0;return n&&(S[n>>2]=t),t}},N=(function(){var n={a:Y};function t(n,t){var e=n.exports;a.asm=e,h=a.asm.c,function(n){if(D--,a.monitorRunDependencies&&a.monitorRunDependencies(D),0==D&&(null!==F&&(clearInterval(F),F=null),T)){var t=T;T=null,t()}}()}function e(n){t(n.instance)}function r(t){return(f||"function"!=typeof fetch?Promise.resolve().then(K):fetch(Z,{credentials:"same-origin"}).then((function(n){if(!n.ok)throw"failed to load wasm binary file at '"+Z+"'";return n.arrayBuffer()})).catch((function(){return K()}))).then((function(t){return WebAssembly.instantiate(t,n)})).then(t,(function(n){m("failed to asynchronously prepare wasm: "+n),B(n)}))}if(D++,a.monitorRunDependencies&&a.monitorRunDependencies(D),a.instantiateWasm)try{return a.instantiateWasm(n,t)}catch(n){return m("Module.instantiateWasm callback failed with error: "+n),!1}!function(){if(f||"function"!=typeof WebAssembly.instantiateStreaming||z(Z)||"function"!=typeof fetch)return r(e);fetch(Z,{credentials:"same-origin"}).then((function(t){return WebAssembly.instantiateStreaming(t,n).then(e,(function(n){return m("wasm streaming compile failed: "+n),m("falling back to ArrayBuffer instantiation"),r(e)}))}))}()}(),a.___wasm_call_ctors=function(){return(N=a.___wasm_call_ctors=a.asm.d).apply(null,arguments)}),X=(a._init=function(){return(a._init=a.asm.e).apply(null,arguments)},a._perform=function(){return(a._perform=a.asm.f).apply(null,arguments)},a._main=function(){return(a._main=a.asm.g).apply(null,arguments)},a.stackSave=function(){return(X=a.stackSave=a.asm.h).apply(null,arguments)}),$=a.stackRestore=function(){return($=a.stackRestore=a.asm.i).apply(null,arguments)},G=a.stackAlloc=function(){return(G=a.stackAlloc=a.asm.j).apply(null,arguments)};function J(n){this.name="ExitStatus",this.message="Program terminated with exit("+n+")",this.status=n}function Q(n){function t(){q||(q=!0,a.calledRun=!0,v||(L(W),L(H),e(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),nn&&function(n){var t,e=a._main,r=(n=n||[]).length+1,i=G(4*(r+1));S[i>>2]=x(u);for(var o=1;o<r;o++)S[(i>>2)+o]=x(n[o-1]);S[(i>>2)+r]=0;try{t=e(r,i),p&&0===t||(p||(a.onExit&&a.onExit(t),v=!0),c(t,new J(t)))}catch(n){if(n instanceof J)return;if("unwind"==n)return void(p=!0);var s=n;n&&"object"==typeof n&&n.stack&&(s=[n,n.stack]),m("exception thrown: "+s),c(1,n)}}(n),function(){if(a.postRun)for("function"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;)n=a.postRun.shift(),O.unshift(n);var n;L(O)}()))}n=n||s,D>0||(function(){if(a.preRun)for("function"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)n=a.preRun.shift(),C.unshift(n);var n;L(C)}(),D>0||(a.setStatus?(a.setStatus("Running..."),setTimeout((function(){setTimeout((function(){a.setStatus("")}),1),t()}),1)):t()))}if(a.cwrap=function(n,t,e,r){var a=(e=e||[]).every((function(n){return"number"===n}));return"string"!==t&&a&&!r?w(n):function(){return b(n,t,e,arguments)}},a.setValue=function(n,t,e,r){switch("*"===(e=e||"i8").charAt(e.length-1)&&(e="i32"),e){case"i1":case"i8":g[n>>0]=t;break;case"i16":k[n>>1]=t;break;case"i32":S[n>>2]=t;break;case"i64":j=[t>>>0,(V=t,+Math.abs(V)>=1?V>0?(0|Math.min(+Math.floor(V/4294967296),4294967295))>>>0:~~+Math.ceil((V-+(~~V>>>0))/4294967296)>>>0:0)],S[n>>2]=j[0],S[n+4>>2]=j[1];break;case"float":R[n>>2]=t;break;case"double":E[n>>3]=t;break;default:B("invalid type for setValue: "+e)}},a.getValue=function(n,t,e){switch("*"===(t=t||"i8").charAt(t.length-1)&&(t="i32"),t){case"i1":case"i8":return g[n>>0];case"i16":return k[n>>1];case"i32":case"i64":return S[n>>2];case"float":return R[n>>2];case"double":return E[n>>3];default:B("invalid type for getValue: "+t)}return null},T=function n(){q||Q(),q||(T=n)},a.run=Q,a.preInit)for("function"==typeof a.preInit&&(a.preInit=[a.preInit]);a.preInit.length>0;)a.preInit.pop()();var nn=!0;return a.noInitialRun&&(nn=!1),p=!0,Q(),n.ready});n.exports=e}},0,[[869,666,216]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,